// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.exportar_acta_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: exportar_acta Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class exportar_acta implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "exportar_acta";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				exportar_acta.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(exportar_acta.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class secuencia_actaStruct implements routines.system.IPersistableRow<secuencia_actaStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_exportar_acta = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[0];

	
			    public String FechaAsignacion;

				public String getFechaAsignacion () {
					return this.FechaAsignacion;
				}
				
			    public String Equipo_Trabajo;

				public String getEquipo_Trabajo () {
					return this.Equipo_Trabajo;
				}
				
			    public String UNIDAD_OPERATIVA;

				public String getUNIDAD_OPERATIVA () {
					return this.UNIDAD_OPERATIVA;
				}
				
			    public String Tarea;

				public String getTarea () {
					return this.Tarea;
				}
				
			    public String DescTarea;

				public String getDescTarea () {
					return this.DescTarea;
				}
				
			    public String Orden;

				public String getOrden () {
					return this.Orden;
				}
				
			    public String Ciclo;

				public String getCiclo () {
					return this.Ciclo;
				}
				
			    public String servicio;

				public String getServicio () {
					return this.servicio;
				}
				
			    public String Estado;

				public String getEstado () {
					return this.Estado;
				}
				
			    public String Desc_estado;

				public String getDesc_estado () {
					return this.Desc_estado;
				}
				
			    public String FechaCREATED;

				public String getFechaCREATED () {
					return this.FechaCREATED;
				}
				
			    public String Fechalegalization;

				public String getFechalegalization () {
					return this.Fechalegalization;
				}
				
			    public String Horalegalization;

				public String getHoralegalization () {
					return this.Horalegalization;
				}
				
			    public String Instalacion;

				public String getInstalacion () {
					return this.Instalacion;
				}
				
			    public String urbano_rural;

				public String getUrbano_rural () {
					return this.urbano_rural;
				}
				
			    public String ortrinur;

				public String getOrtrinur () {
					return this.ortrinur;
				}
				
			    public String descripciona;

				public String getDescripciona () {
					return this.descripciona;
				}
				
			    public String Ciudad;

				public String getCiudad () {
					return this.Ciudad;
				}
				
			    public String cmrudesc;

				public String getCmrudesc () {
					return this.cmrudesc;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String regndesc;

				public String getRegndesc () {
					return this.regndesc;
				}
				
			    public String depacodi;

				public String getDepacodi () {
					return this.depacodi;
				}
				
			    public String codigorespuesta;

				public String getCodigorespuesta () {
					return this.codigorespuesta;
				}
				
			    public String respuestatencion;

				public String getRespuestatencion () {
					return this.respuestatencion;
				}
				
			    public String x;

				public String getX () {
					return this.x;
				}
				
			    public String y;

				public String getY () {
					return this.y;
				}
				
			    public String Ano;

				public String getAno () {
					return this.Ano;
				}
				
			    public String Mes;

				public String getMes () {
					return this.Mes;
				}
				
			    public String Dia;

				public String getDia () {
					return this.Dia;
				}
				
			    public String desc_cna;

				public String getDesc_cna () {
					return this.desc_cna;
				}
				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}
				
			    public String DESC_ACTIVIDAD;

				public String getDESC_ACTIVIDAD () {
					return this.DESC_ACTIVIDAD;
				}
				
			    public String FRECUENCIA;

				public String getFRECUENCIA () {
					return this.FRECUENCIA;
				}
				
			    public String CUENTAS_VENCIDAS;

				public String getCUENTAS_VENCIDAS () {
					return this.CUENTAS_VENCIDAS;
				}
				
			    public String SALDO_CUENTAS_VENCIDAS;

				public String getSALDO_CUENTAS_VENCIDAS () {
					return this.SALDO_CUENTAS_VENCIDAS;
				}
				
			    public String ESTADO_CORTE;

				public String getESTADO_CORTE () {
					return this.ESTADO_CORTE;
				}
				
			    public String TIPO_ACTIVIDAD;

				public String getTIPO_ACTIVIDAD () {
					return this.TIPO_ACTIVIDAD;
				}
				
			    public String ROUTE_ID;

				public String getROUTE_ID () {
					return this.ROUTE_ID;
				}
				
			    public String NAME_;

				public String getNAME_ () {
					return this.NAME_;
				}
				
			    public String NUMBER_ID;

				public String getNUMBER_ID () {
					return this.NUMBER_ID;
				}
				
			    public String CODIGO_CAUSANL_OBS;

				public String getCODIGO_CAUSANL_OBS () {
					return this.CODIGO_CAUSANL_OBS;
				}
				
			    public String CAUSANL_OBS;

				public String getCAUSANL_OBS () {
					return this.CAUSANL_OBS;
				}
				
			    public String CODIGO_CAUSANL_OBS2;

				public String getCODIGO_CAUSANL_OBS2 () {
					return this.CODIGO_CAUSANL_OBS2;
				}
				
			    public String CAUSANL_OBS2;

				public String getCAUSANL_OBS2 () {
					return this.CAUSANL_OBS2;
				}
				
			    public String CODIGO_CAUSANL_OBS3;

				public String getCODIGO_CAUSANL_OBS3 () {
					return this.CODIGO_CAUSANL_OBS3;
				}
				
			    public String CAUSANL_OBS3;

				public String getCAUSANL_OBS3 () {
					return this.CAUSANL_OBS3;
				}
				
			    public String SERVICIO_SUSCRITO;

				public String getSERVICIO_SUSCRITO () {
					return this.SERVICIO_SUSCRITO;
				}
				
			    public String COD_TIPO_SERVICIO;

				public String getCOD_TIPO_SERVICIO () {
					return this.COD_TIPO_SERVICIO;
				}
				
			    public String TIPO_SERVICIO;

				public String getTIPO_SERVICIO () {
					return this.TIPO_SERVICIO;
				}
				
			    public String categoria;

				public String getCategoria () {
					return this.categoria;
				}
				
			    public String ESTRATO;

				public String getESTRATO () {
					return this.ESTRATO;
				}
				
			    public String DESC_SERVICIO;

				public String getDESC_SERVICIO () {
					return this.DESC_SERVICIO;
				}
				
			    public String orden_relacionada;

				public String getOrden_relacionada () {
					return this.orden_relacionada;
				}
				
			    public String order_activity_ID;

				public String getOrder_activity_ID () {
					return this.order_activity_ID;
				}
				
			    public String Adjunto;

				public String getAdjunto () {
					return this.Adjunto;
				}
				
			    public String ID_SECUENCIAS_ACTA;

				public String getID_SECUENCIAS_ACTA () {
					return this.ID_SECUENCIAS_ACTA;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_exportar_acta.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_exportar_acta.length == 0) {
   					commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_exportar_acta, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_exportar_acta, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_exportar_acta) {

        	try {

        		int length = 0;
		
					this.FechaAsignacion = readString(dis);
					
					this.Equipo_Trabajo = readString(dis);
					
					this.UNIDAD_OPERATIVA = readString(dis);
					
					this.Tarea = readString(dis);
					
					this.DescTarea = readString(dis);
					
					this.Orden = readString(dis);
					
					this.Ciclo = readString(dis);
					
					this.servicio = readString(dis);
					
					this.Estado = readString(dis);
					
					this.Desc_estado = readString(dis);
					
					this.FechaCREATED = readString(dis);
					
					this.Fechalegalization = readString(dis);
					
					this.Horalegalization = readString(dis);
					
					this.Instalacion = readString(dis);
					
					this.urbano_rural = readString(dis);
					
					this.ortrinur = readString(dis);
					
					this.descripciona = readString(dis);
					
					this.Ciudad = readString(dis);
					
					this.cmrudesc = readString(dis);
					
					this.region = readString(dis);
					
					this.regndesc = readString(dis);
					
					this.depacodi = readString(dis);
					
					this.codigorespuesta = readString(dis);
					
					this.respuestatencion = readString(dis);
					
					this.x = readString(dis);
					
					this.y = readString(dis);
					
					this.Ano = readString(dis);
					
					this.Mes = readString(dis);
					
					this.Dia = readString(dis);
					
					this.desc_cna = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
					this.DESC_ACTIVIDAD = readString(dis);
					
					this.FRECUENCIA = readString(dis);
					
					this.CUENTAS_VENCIDAS = readString(dis);
					
					this.SALDO_CUENTAS_VENCIDAS = readString(dis);
					
					this.ESTADO_CORTE = readString(dis);
					
					this.TIPO_ACTIVIDAD = readString(dis);
					
					this.ROUTE_ID = readString(dis);
					
					this.NAME_ = readString(dis);
					
					this.NUMBER_ID = readString(dis);
					
					this.CODIGO_CAUSANL_OBS = readString(dis);
					
					this.CAUSANL_OBS = readString(dis);
					
					this.CODIGO_CAUSANL_OBS2 = readString(dis);
					
					this.CAUSANL_OBS2 = readString(dis);
					
					this.CODIGO_CAUSANL_OBS3 = readString(dis);
					
					this.CAUSANL_OBS3 = readString(dis);
					
					this.SERVICIO_SUSCRITO = readString(dis);
					
					this.COD_TIPO_SERVICIO = readString(dis);
					
					this.TIPO_SERVICIO = readString(dis);
					
					this.categoria = readString(dis);
					
					this.ESTRATO = readString(dis);
					
					this.DESC_SERVICIO = readString(dis);
					
					this.orden_relacionada = readString(dis);
					
					this.order_activity_ID = readString(dis);
					
					this.Adjunto = readString(dis);
					
					this.ID_SECUENCIAS_ACTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FechaAsignacion,dos);
					
					// String
				
						writeString(this.Equipo_Trabajo,dos);
					
					// String
				
						writeString(this.UNIDAD_OPERATIVA,dos);
					
					// String
				
						writeString(this.Tarea,dos);
					
					// String
				
						writeString(this.DescTarea,dos);
					
					// String
				
						writeString(this.Orden,dos);
					
					// String
				
						writeString(this.Ciclo,dos);
					
					// String
				
						writeString(this.servicio,dos);
					
					// String
				
						writeString(this.Estado,dos);
					
					// String
				
						writeString(this.Desc_estado,dos);
					
					// String
				
						writeString(this.FechaCREATED,dos);
					
					// String
				
						writeString(this.Fechalegalization,dos);
					
					// String
				
						writeString(this.Horalegalization,dos);
					
					// String
				
						writeString(this.Instalacion,dos);
					
					// String
				
						writeString(this.urbano_rural,dos);
					
					// String
				
						writeString(this.ortrinur,dos);
					
					// String
				
						writeString(this.descripciona,dos);
					
					// String
				
						writeString(this.Ciudad,dos);
					
					// String
				
						writeString(this.cmrudesc,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.regndesc,dos);
					
					// String
				
						writeString(this.depacodi,dos);
					
					// String
				
						writeString(this.codigorespuesta,dos);
					
					// String
				
						writeString(this.respuestatencion,dos);
					
					// String
				
						writeString(this.x,dos);
					
					// String
				
						writeString(this.y,dos);
					
					// String
				
						writeString(this.Ano,dos);
					
					// String
				
						writeString(this.Mes,dos);
					
					// String
				
						writeString(this.Dia,dos);
					
					// String
				
						writeString(this.desc_cna,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// String
				
						writeString(this.DESC_ACTIVIDAD,dos);
					
					// String
				
						writeString(this.FRECUENCIA,dos);
					
					// String
				
						writeString(this.CUENTAS_VENCIDAS,dos);
					
					// String
				
						writeString(this.SALDO_CUENTAS_VENCIDAS,dos);
					
					// String
				
						writeString(this.ESTADO_CORTE,dos);
					
					// String
				
						writeString(this.TIPO_ACTIVIDAD,dos);
					
					// String
				
						writeString(this.ROUTE_ID,dos);
					
					// String
				
						writeString(this.NAME_,dos);
					
					// String
				
						writeString(this.NUMBER_ID,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS2,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS2,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS3,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS3,dos);
					
					// String
				
						writeString(this.SERVICIO_SUSCRITO,dos);
					
					// String
				
						writeString(this.COD_TIPO_SERVICIO,dos);
					
					// String
				
						writeString(this.TIPO_SERVICIO,dos);
					
					// String
				
						writeString(this.categoria,dos);
					
					// String
				
						writeString(this.ESTRATO,dos);
					
					// String
				
						writeString(this.DESC_SERVICIO,dos);
					
					// String
				
						writeString(this.orden_relacionada,dos);
					
					// String
				
						writeString(this.order_activity_ID,dos);
					
					// String
				
						writeString(this.Adjunto,dos);
					
					// String
				
						writeString(this.ID_SECUENCIAS_ACTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FechaAsignacion="+FechaAsignacion);
		sb.append(",Equipo_Trabajo="+Equipo_Trabajo);
		sb.append(",UNIDAD_OPERATIVA="+UNIDAD_OPERATIVA);
		sb.append(",Tarea="+Tarea);
		sb.append(",DescTarea="+DescTarea);
		sb.append(",Orden="+Orden);
		sb.append(",Ciclo="+Ciclo);
		sb.append(",servicio="+servicio);
		sb.append(",Estado="+Estado);
		sb.append(",Desc_estado="+Desc_estado);
		sb.append(",FechaCREATED="+FechaCREATED);
		sb.append(",Fechalegalization="+Fechalegalization);
		sb.append(",Horalegalization="+Horalegalization);
		sb.append(",Instalacion="+Instalacion);
		sb.append(",urbano_rural="+urbano_rural);
		sb.append(",ortrinur="+ortrinur);
		sb.append(",descripciona="+descripciona);
		sb.append(",Ciudad="+Ciudad);
		sb.append(",cmrudesc="+cmrudesc);
		sb.append(",region="+region);
		sb.append(",regndesc="+regndesc);
		sb.append(",depacodi="+depacodi);
		sb.append(",codigorespuesta="+codigorespuesta);
		sb.append(",respuestatencion="+respuestatencion);
		sb.append(",x="+x);
		sb.append(",y="+y);
		sb.append(",Ano="+Ano);
		sb.append(",Mes="+Mes);
		sb.append(",Dia="+Dia);
		sb.append(",desc_cna="+desc_cna);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",DESC_ACTIVIDAD="+DESC_ACTIVIDAD);
		sb.append(",FRECUENCIA="+FRECUENCIA);
		sb.append(",CUENTAS_VENCIDAS="+CUENTAS_VENCIDAS);
		sb.append(",SALDO_CUENTAS_VENCIDAS="+SALDO_CUENTAS_VENCIDAS);
		sb.append(",ESTADO_CORTE="+ESTADO_CORTE);
		sb.append(",TIPO_ACTIVIDAD="+TIPO_ACTIVIDAD);
		sb.append(",ROUTE_ID="+ROUTE_ID);
		sb.append(",NAME_="+NAME_);
		sb.append(",NUMBER_ID="+NUMBER_ID);
		sb.append(",CODIGO_CAUSANL_OBS="+CODIGO_CAUSANL_OBS);
		sb.append(",CAUSANL_OBS="+CAUSANL_OBS);
		sb.append(",CODIGO_CAUSANL_OBS2="+CODIGO_CAUSANL_OBS2);
		sb.append(",CAUSANL_OBS2="+CAUSANL_OBS2);
		sb.append(",CODIGO_CAUSANL_OBS3="+CODIGO_CAUSANL_OBS3);
		sb.append(",CAUSANL_OBS3="+CAUSANL_OBS3);
		sb.append(",SERVICIO_SUSCRITO="+SERVICIO_SUSCRITO);
		sb.append(",COD_TIPO_SERVICIO="+COD_TIPO_SERVICIO);
		sb.append(",TIPO_SERVICIO="+TIPO_SERVICIO);
		sb.append(",categoria="+categoria);
		sb.append(",ESTRATO="+ESTRATO);
		sb.append(",DESC_SERVICIO="+DESC_SERVICIO);
		sb.append(",orden_relacionada="+orden_relacionada);
		sb.append(",order_activity_ID="+order_activity_ID);
		sb.append(",Adjunto="+Adjunto);
		sb.append(",ID_SECUENCIAS_ACTA="+ID_SECUENCIAS_ACTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(secuencia_actaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_exportar_acta = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[0];

	
			    public String FechaAsignacion;

				public String getFechaAsignacion () {
					return this.FechaAsignacion;
				}
				
			    public String Equipo_Trabajo;

				public String getEquipo_Trabajo () {
					return this.Equipo_Trabajo;
				}
				
			    public String UNIDAD_OPERATIVA;

				public String getUNIDAD_OPERATIVA () {
					return this.UNIDAD_OPERATIVA;
				}
				
			    public String Tarea;

				public String getTarea () {
					return this.Tarea;
				}
				
			    public String DescTarea;

				public String getDescTarea () {
					return this.DescTarea;
				}
				
			    public String Orden;

				public String getOrden () {
					return this.Orden;
				}
				
			    public String Ciclo;

				public String getCiclo () {
					return this.Ciclo;
				}
				
			    public String servicio;

				public String getServicio () {
					return this.servicio;
				}
				
			    public String Estado;

				public String getEstado () {
					return this.Estado;
				}
				
			    public String Desc_estado;

				public String getDesc_estado () {
					return this.Desc_estado;
				}
				
			    public String FechaCREATED;

				public String getFechaCREATED () {
					return this.FechaCREATED;
				}
				
			    public String Fechalegalization;

				public String getFechalegalization () {
					return this.Fechalegalization;
				}
				
			    public String Horalegalization;

				public String getHoralegalization () {
					return this.Horalegalization;
				}
				
			    public String Instalacion;

				public String getInstalacion () {
					return this.Instalacion;
				}
				
			    public String urbano_rural;

				public String getUrbano_rural () {
					return this.urbano_rural;
				}
				
			    public String ortrinur;

				public String getOrtrinur () {
					return this.ortrinur;
				}
				
			    public String descripciona;

				public String getDescripciona () {
					return this.descripciona;
				}
				
			    public String Ciudad;

				public String getCiudad () {
					return this.Ciudad;
				}
				
			    public String cmrudesc;

				public String getCmrudesc () {
					return this.cmrudesc;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String regndesc;

				public String getRegndesc () {
					return this.regndesc;
				}
				
			    public String depacodi;

				public String getDepacodi () {
					return this.depacodi;
				}
				
			    public String codigorespuesta;

				public String getCodigorespuesta () {
					return this.codigorespuesta;
				}
				
			    public String respuestatencion;

				public String getRespuestatencion () {
					return this.respuestatencion;
				}
				
			    public String x;

				public String getX () {
					return this.x;
				}
				
			    public String y;

				public String getY () {
					return this.y;
				}
				
			    public String Ano;

				public String getAno () {
					return this.Ano;
				}
				
			    public String Mes;

				public String getMes () {
					return this.Mes;
				}
				
			    public String Dia;

				public String getDia () {
					return this.Dia;
				}
				
			    public String desc_cna;

				public String getDesc_cna () {
					return this.desc_cna;
				}
				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}
				
			    public String DESC_ACTIVIDAD;

				public String getDESC_ACTIVIDAD () {
					return this.DESC_ACTIVIDAD;
				}
				
			    public String FRECUENCIA;

				public String getFRECUENCIA () {
					return this.FRECUENCIA;
				}
				
			    public String CUENTAS_VENCIDAS;

				public String getCUENTAS_VENCIDAS () {
					return this.CUENTAS_VENCIDAS;
				}
				
			    public String SALDO_CUENTAS_VENCIDAS;

				public String getSALDO_CUENTAS_VENCIDAS () {
					return this.SALDO_CUENTAS_VENCIDAS;
				}
				
			    public String ESTADO_CORTE;

				public String getESTADO_CORTE () {
					return this.ESTADO_CORTE;
				}
				
			    public String TIPO_ACTIVIDAD;

				public String getTIPO_ACTIVIDAD () {
					return this.TIPO_ACTIVIDAD;
				}
				
			    public String ROUTE_ID;

				public String getROUTE_ID () {
					return this.ROUTE_ID;
				}
				
			    public String NAME_;

				public String getNAME_ () {
					return this.NAME_;
				}
				
			    public String NUMBER_ID;

				public String getNUMBER_ID () {
					return this.NUMBER_ID;
				}
				
			    public String CODIGO_CAUSANL_OBS;

				public String getCODIGO_CAUSANL_OBS () {
					return this.CODIGO_CAUSANL_OBS;
				}
				
			    public String CAUSANL_OBS;

				public String getCAUSANL_OBS () {
					return this.CAUSANL_OBS;
				}
				
			    public String CODIGO_CAUSANL_OBS2;

				public String getCODIGO_CAUSANL_OBS2 () {
					return this.CODIGO_CAUSANL_OBS2;
				}
				
			    public String CAUSANL_OBS2;

				public String getCAUSANL_OBS2 () {
					return this.CAUSANL_OBS2;
				}
				
			    public String CODIGO_CAUSANL_OBS3;

				public String getCODIGO_CAUSANL_OBS3 () {
					return this.CODIGO_CAUSANL_OBS3;
				}
				
			    public String CAUSANL_OBS3;

				public String getCAUSANL_OBS3 () {
					return this.CAUSANL_OBS3;
				}
				
			    public String SERVICIO_SUSCRITO;

				public String getSERVICIO_SUSCRITO () {
					return this.SERVICIO_SUSCRITO;
				}
				
			    public String COD_TIPO_SERVICIO;

				public String getCOD_TIPO_SERVICIO () {
					return this.COD_TIPO_SERVICIO;
				}
				
			    public String TIPO_SERVICIO;

				public String getTIPO_SERVICIO () {
					return this.TIPO_SERVICIO;
				}
				
			    public String categoria;

				public String getCategoria () {
					return this.categoria;
				}
				
			    public String ESTRATO;

				public String getESTRATO () {
					return this.ESTRATO;
				}
				
			    public String DESC_SERVICIO;

				public String getDESC_SERVICIO () {
					return this.DESC_SERVICIO;
				}
				
			    public String orden_relacionada;

				public String getOrden_relacionada () {
					return this.orden_relacionada;
				}
				
			    public String order_activity_ID;

				public String getOrder_activity_ID () {
					return this.order_activity_ID;
				}
				
			    public String Adjunto;

				public String getAdjunto () {
					return this.Adjunto;
				}
				
			    public String ID_SECUENCIAS_ACTA;

				public String getID_SECUENCIAS_ACTA () {
					return this.ID_SECUENCIAS_ACTA;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_exportar_acta.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_exportar_acta.length == 0) {
   					commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_exportar_acta, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_exportar_acta, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_exportar_acta) {

        	try {

        		int length = 0;
		
					this.FechaAsignacion = readString(dis);
					
					this.Equipo_Trabajo = readString(dis);
					
					this.UNIDAD_OPERATIVA = readString(dis);
					
					this.Tarea = readString(dis);
					
					this.DescTarea = readString(dis);
					
					this.Orden = readString(dis);
					
					this.Ciclo = readString(dis);
					
					this.servicio = readString(dis);
					
					this.Estado = readString(dis);
					
					this.Desc_estado = readString(dis);
					
					this.FechaCREATED = readString(dis);
					
					this.Fechalegalization = readString(dis);
					
					this.Horalegalization = readString(dis);
					
					this.Instalacion = readString(dis);
					
					this.urbano_rural = readString(dis);
					
					this.ortrinur = readString(dis);
					
					this.descripciona = readString(dis);
					
					this.Ciudad = readString(dis);
					
					this.cmrudesc = readString(dis);
					
					this.region = readString(dis);
					
					this.regndesc = readString(dis);
					
					this.depacodi = readString(dis);
					
					this.codigorespuesta = readString(dis);
					
					this.respuestatencion = readString(dis);
					
					this.x = readString(dis);
					
					this.y = readString(dis);
					
					this.Ano = readString(dis);
					
					this.Mes = readString(dis);
					
					this.Dia = readString(dis);
					
					this.desc_cna = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
					this.DESC_ACTIVIDAD = readString(dis);
					
					this.FRECUENCIA = readString(dis);
					
					this.CUENTAS_VENCIDAS = readString(dis);
					
					this.SALDO_CUENTAS_VENCIDAS = readString(dis);
					
					this.ESTADO_CORTE = readString(dis);
					
					this.TIPO_ACTIVIDAD = readString(dis);
					
					this.ROUTE_ID = readString(dis);
					
					this.NAME_ = readString(dis);
					
					this.NUMBER_ID = readString(dis);
					
					this.CODIGO_CAUSANL_OBS = readString(dis);
					
					this.CAUSANL_OBS = readString(dis);
					
					this.CODIGO_CAUSANL_OBS2 = readString(dis);
					
					this.CAUSANL_OBS2 = readString(dis);
					
					this.CODIGO_CAUSANL_OBS3 = readString(dis);
					
					this.CAUSANL_OBS3 = readString(dis);
					
					this.SERVICIO_SUSCRITO = readString(dis);
					
					this.COD_TIPO_SERVICIO = readString(dis);
					
					this.TIPO_SERVICIO = readString(dis);
					
					this.categoria = readString(dis);
					
					this.ESTRATO = readString(dis);
					
					this.DESC_SERVICIO = readString(dis);
					
					this.orden_relacionada = readString(dis);
					
					this.order_activity_ID = readString(dis);
					
					this.Adjunto = readString(dis);
					
					this.ID_SECUENCIAS_ACTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FechaAsignacion,dos);
					
					// String
				
						writeString(this.Equipo_Trabajo,dos);
					
					// String
				
						writeString(this.UNIDAD_OPERATIVA,dos);
					
					// String
				
						writeString(this.Tarea,dos);
					
					// String
				
						writeString(this.DescTarea,dos);
					
					// String
				
						writeString(this.Orden,dos);
					
					// String
				
						writeString(this.Ciclo,dos);
					
					// String
				
						writeString(this.servicio,dos);
					
					// String
				
						writeString(this.Estado,dos);
					
					// String
				
						writeString(this.Desc_estado,dos);
					
					// String
				
						writeString(this.FechaCREATED,dos);
					
					// String
				
						writeString(this.Fechalegalization,dos);
					
					// String
				
						writeString(this.Horalegalization,dos);
					
					// String
				
						writeString(this.Instalacion,dos);
					
					// String
				
						writeString(this.urbano_rural,dos);
					
					// String
				
						writeString(this.ortrinur,dos);
					
					// String
				
						writeString(this.descripciona,dos);
					
					// String
				
						writeString(this.Ciudad,dos);
					
					// String
				
						writeString(this.cmrudesc,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.regndesc,dos);
					
					// String
				
						writeString(this.depacodi,dos);
					
					// String
				
						writeString(this.codigorespuesta,dos);
					
					// String
				
						writeString(this.respuestatencion,dos);
					
					// String
				
						writeString(this.x,dos);
					
					// String
				
						writeString(this.y,dos);
					
					// String
				
						writeString(this.Ano,dos);
					
					// String
				
						writeString(this.Mes,dos);
					
					// String
				
						writeString(this.Dia,dos);
					
					// String
				
						writeString(this.desc_cna,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// String
				
						writeString(this.DESC_ACTIVIDAD,dos);
					
					// String
				
						writeString(this.FRECUENCIA,dos);
					
					// String
				
						writeString(this.CUENTAS_VENCIDAS,dos);
					
					// String
				
						writeString(this.SALDO_CUENTAS_VENCIDAS,dos);
					
					// String
				
						writeString(this.ESTADO_CORTE,dos);
					
					// String
				
						writeString(this.TIPO_ACTIVIDAD,dos);
					
					// String
				
						writeString(this.ROUTE_ID,dos);
					
					// String
				
						writeString(this.NAME_,dos);
					
					// String
				
						writeString(this.NUMBER_ID,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS2,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS2,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS3,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS3,dos);
					
					// String
				
						writeString(this.SERVICIO_SUSCRITO,dos);
					
					// String
				
						writeString(this.COD_TIPO_SERVICIO,dos);
					
					// String
				
						writeString(this.TIPO_SERVICIO,dos);
					
					// String
				
						writeString(this.categoria,dos);
					
					// String
				
						writeString(this.ESTRATO,dos);
					
					// String
				
						writeString(this.DESC_SERVICIO,dos);
					
					// String
				
						writeString(this.orden_relacionada,dos);
					
					// String
				
						writeString(this.order_activity_ID,dos);
					
					// String
				
						writeString(this.Adjunto,dos);
					
					// String
				
						writeString(this.ID_SECUENCIAS_ACTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FechaAsignacion="+FechaAsignacion);
		sb.append(",Equipo_Trabajo="+Equipo_Trabajo);
		sb.append(",UNIDAD_OPERATIVA="+UNIDAD_OPERATIVA);
		sb.append(",Tarea="+Tarea);
		sb.append(",DescTarea="+DescTarea);
		sb.append(",Orden="+Orden);
		sb.append(",Ciclo="+Ciclo);
		sb.append(",servicio="+servicio);
		sb.append(",Estado="+Estado);
		sb.append(",Desc_estado="+Desc_estado);
		sb.append(",FechaCREATED="+FechaCREATED);
		sb.append(",Fechalegalization="+Fechalegalization);
		sb.append(",Horalegalization="+Horalegalization);
		sb.append(",Instalacion="+Instalacion);
		sb.append(",urbano_rural="+urbano_rural);
		sb.append(",ortrinur="+ortrinur);
		sb.append(",descripciona="+descripciona);
		sb.append(",Ciudad="+Ciudad);
		sb.append(",cmrudesc="+cmrudesc);
		sb.append(",region="+region);
		sb.append(",regndesc="+regndesc);
		sb.append(",depacodi="+depacodi);
		sb.append(",codigorespuesta="+codigorespuesta);
		sb.append(",respuestatencion="+respuestatencion);
		sb.append(",x="+x);
		sb.append(",y="+y);
		sb.append(",Ano="+Ano);
		sb.append(",Mes="+Mes);
		sb.append(",Dia="+Dia);
		sb.append(",desc_cna="+desc_cna);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",DESC_ACTIVIDAD="+DESC_ACTIVIDAD);
		sb.append(",FRECUENCIA="+FRECUENCIA);
		sb.append(",CUENTAS_VENCIDAS="+CUENTAS_VENCIDAS);
		sb.append(",SALDO_CUENTAS_VENCIDAS="+SALDO_CUENTAS_VENCIDAS);
		sb.append(",ESTADO_CORTE="+ESTADO_CORTE);
		sb.append(",TIPO_ACTIVIDAD="+TIPO_ACTIVIDAD);
		sb.append(",ROUTE_ID="+ROUTE_ID);
		sb.append(",NAME_="+NAME_);
		sb.append(",NUMBER_ID="+NUMBER_ID);
		sb.append(",CODIGO_CAUSANL_OBS="+CODIGO_CAUSANL_OBS);
		sb.append(",CAUSANL_OBS="+CAUSANL_OBS);
		sb.append(",CODIGO_CAUSANL_OBS2="+CODIGO_CAUSANL_OBS2);
		sb.append(",CAUSANL_OBS2="+CAUSANL_OBS2);
		sb.append(",CODIGO_CAUSANL_OBS3="+CODIGO_CAUSANL_OBS3);
		sb.append(",CAUSANL_OBS3="+CAUSANL_OBS3);
		sb.append(",SERVICIO_SUSCRITO="+SERVICIO_SUSCRITO);
		sb.append(",COD_TIPO_SERVICIO="+COD_TIPO_SERVICIO);
		sb.append(",TIPO_SERVICIO="+TIPO_SERVICIO);
		sb.append(",categoria="+categoria);
		sb.append(",ESTRATO="+ESTRATO);
		sb.append(",DESC_SERVICIO="+DESC_SERVICIO);
		sb.append(",orden_relacionada="+orden_relacionada);
		sb.append(",order_activity_ID="+order_activity_ID);
		sb.append(",Adjunto="+Adjunto);
		sb.append(",ID_SECUENCIAS_ACTA="+ID_SECUENCIAS_ACTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
secuencia_actaStruct secuencia_acta = new secuencia_actaStruct();





	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"secuencia_acta");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1="C:/Users/Administrador/OneDrive - ingeomega.com/03_Procesos Informáticos/10 Alexander Orozco/01 Reporte Acta/Del 1 al 15 Acta.xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("Acta_1_15");
		xlsxTool_tFileOutputExcel_1.setAppend(false,false);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FechaAsignacion");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Equipo_Trabajo");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UNIDAD_OPERATIVA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Tarea");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DescTarea");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Orden");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Ciclo");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("servicio");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Estado");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Desc_estado");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FechaCREATED");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Fechalegalization");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Horalegalization");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Instalacion");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("urbano_rural");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ortrinur");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("descripciona");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Ciudad");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("cmrudesc");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("region");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("regndesc");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("depacodi");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("codigorespuesta");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("respuestatencion");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("x");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("y");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Ano");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Mes");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Dia");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("desc_cna");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ACTIVIDAD");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DESC_ACTIVIDAD");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FRECUENCIA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CUENTAS_VENCIDAS");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SALDO_CUENTAS_VENCIDAS");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ESTADO_CORTE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("TIPO_ACTIVIDAD");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ROUTE_ID");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NAME_");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NUMBER_ID");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CODIGO_CAUSANL_OBS");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CAUSANL_OBS");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CODIGO_CAUSANL_OBS2");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CAUSANL_OBS2");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CODIGO_CAUSANL_OBS3");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CAUSANL_OBS3");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SERVICIO_SUSCRITO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COD_TIPO_SERVICIO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("TIPO_SERVICIO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("categoria");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ESTRATO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DESC_SERVICIO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("orden_relacionada");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("order_activity_ID");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Adjunto");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ID_SECUENCIAS_ACTA");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
secuencia_actaStruct secuencia_acta_tmp = new secuencia_actaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.mariadb.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "lectura";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Ay2z4XNu95JgOASSSPJwr4qemYZk8bILRyu9RWkLxHiUXP1Fatr9/i4=");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:mariadb://" + "192.168.4.240" + ":" + "3306" + "/" + "ingeomega" + "?" + "noDatetimeStringSync=true";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT `FechaAsignacion`\n   , `Equipo_Trabajo`\n   , `UNIDAD_OPERATIVA`\n   , `Tarea`\n   , `DescTarea`\n   , `Orden`"
+"\n   , `Ciclo`\n   , `servicio`\n   , `Estado`\n   , `Desc_estado`\n   , `FechaCREATED`\n   , `Fechalegalization`\n   , `"
+"Horalegalization`\n   , `Instalacion`\n   , `urbano_rural`\n   , `ortrinur`\n   , `descripciona`\n   , `Ciudad`\n   , `c"
+"mrudesc`\n   , `region`\n   , `regndesc`\n   , `depacodi`\n   , `codigorespuesta`\n   , `respuestatencion`\n   , `x`\n  "
+" , `y`\n   , `Ano`\n   , `Mes`\n   , `Dia`\n   , `desc_cna`\n   , `ACTIVIDAD`\n   , `DESC_ACTIVIDAD`\n   , `FRECUENCIA`"
+"\n   , `CUENTAS_VENCIDAS`\n   , `SALDO_CUENTAS_VENCIDAS`\n   , `ESTADO_CORTE`\n   , `TIPO_ACTIVIDAD`\n   , `ROUTE_ID`\n  "
+" , `NAME_`\n   , `NUMBER_ID`\n   , `CODIGO_CAUSANL_OBS`\n   , `CAUSANL_OBS`\n   , `CODIGO_CAUSANL_OBS2`\n   , `CAUSANL_O"
+"BS2`\n   , `CODIGO_CAUSANL_OBS3`\n   , `CAUSANL_OBS3`\n   , `SERVICIO_SUSCRITO`\n   , `COD_TIPO_SERVICIO`\n   , `TIPO_SE"
+"RVICIO`\n   , `categoria`\n   , `ESTRATO`\n   , `DESC_SERVICIO`\n   , `orden_relacionada`\n   , `order_activity_ID`\n   "
+", `Adjunto`\n   , `ID_SECUENCIAS_ACTA`\nFROM secuencias_acta\nwhere Fechalegalization>= (select (CONCAT(COD_ANO,COD_MES,"
+"'01')) from consulta_fecha_acta)\nAND Fechalegalization<= (select (CONCAT(COD_ANO,COD_MES,'15')) from consulta_fecha_act"
+"a)";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.FechaAsignacion = null;
							} else {
	                         		
        	row1.FechaAsignacion = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.Equipo_Trabajo = null;
							} else {
	                         		
        	row1.Equipo_Trabajo = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.UNIDAD_OPERATIVA = null;
							} else {
	                         		
        	row1.UNIDAD_OPERATIVA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.Tarea = null;
							} else {
	                         		
        	row1.Tarea = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.DescTarea = null;
							} else {
	                         		
        	row1.DescTarea = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.Orden = null;
							} else {
	                         		
        	row1.Orden = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.Ciclo = null;
							} else {
	                         		
        	row1.Ciclo = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.servicio = null;
							} else {
	                         		
        	row1.servicio = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.Estado = null;
							} else {
	                         		
        	row1.Estado = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.Desc_estado = null;
							} else {
	                         		
        	row1.Desc_estado = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.FechaCREATED = null;
							} else {
	                         		
        	row1.FechaCREATED = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.Fechalegalization = null;
							} else {
	                         		
        	row1.Fechalegalization = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.Horalegalization = null;
							} else {
	                         		
        	row1.Horalegalization = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.Instalacion = null;
							} else {
	                         		
        	row1.Instalacion = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.urbano_rural = null;
							} else {
	                         		
        	row1.urbano_rural = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.ortrinur = null;
							} else {
	                         		
        	row1.ortrinur = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.descripciona = null;
							} else {
	                         		
        	row1.descripciona = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.Ciudad = null;
							} else {
	                         		
        	row1.Ciudad = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.cmrudesc = null;
							} else {
	                         		
        	row1.cmrudesc = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.region = null;
							} else {
	                         		
        	row1.region = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.regndesc = null;
							} else {
	                         		
        	row1.regndesc = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.depacodi = null;
							} else {
	                         		
        	row1.depacodi = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.codigorespuesta = null;
							} else {
	                         		
        	row1.codigorespuesta = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.respuestatencion = null;
							} else {
	                         		
        	row1.respuestatencion = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.x = null;
							} else {
	                         		
        	row1.x = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.y = null;
							} else {
	                         		
        	row1.y = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.Ano = null;
							} else {
	                         		
        	row1.Ano = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.Mes = null;
							} else {
	                         		
        	row1.Mes = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.Dia = null;
							} else {
	                         		
        	row1.Dia = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.desc_cna = null;
							} else {
	                         		
        	row1.desc_cna = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.ACTIVIDAD = null;
							} else {
	                         		
        	row1.ACTIVIDAD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.DESC_ACTIVIDAD = null;
							} else {
	                         		
        	row1.DESC_ACTIVIDAD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.FRECUENCIA = null;
							} else {
	                         		
        	row1.FRECUENCIA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.CUENTAS_VENCIDAS = null;
							} else {
	                         		
        	row1.CUENTAS_VENCIDAS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.SALDO_CUENTAS_VENCIDAS = null;
							} else {
	                         		
        	row1.SALDO_CUENTAS_VENCIDAS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.ESTADO_CORTE = null;
							} else {
	                         		
        	row1.ESTADO_CORTE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.TIPO_ACTIVIDAD = null;
							} else {
	                         		
        	row1.TIPO_ACTIVIDAD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.ROUTE_ID = null;
							} else {
	                         		
        	row1.ROUTE_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.NAME_ = null;
							} else {
	                         		
        	row1.NAME_ = routines.system.JDBCUtil.getString(rs_tDBInput_1, 39, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.NUMBER_ID = null;
							} else {
	                         		
        	row1.NUMBER_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.CODIGO_CAUSANL_OBS = null;
							} else {
	                         		
        	row1.CODIGO_CAUSANL_OBS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.CAUSANL_OBS = null;
							} else {
	                         		
        	row1.CAUSANL_OBS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.CODIGO_CAUSANL_OBS2 = null;
							} else {
	                         		
        	row1.CODIGO_CAUSANL_OBS2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.CAUSANL_OBS2 = null;
							} else {
	                         		
        	row1.CAUSANL_OBS2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.CODIGO_CAUSANL_OBS3 = null;
							} else {
	                         		
        	row1.CODIGO_CAUSANL_OBS3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 45, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.CAUSANL_OBS3 = null;
							} else {
	                         		
        	row1.CAUSANL_OBS3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 46, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.SERVICIO_SUSCRITO = null;
							} else {
	                         		
        	row1.SERVICIO_SUSCRITO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 47, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.COD_TIPO_SERVICIO = null;
							} else {
	                         		
        	row1.COD_TIPO_SERVICIO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 48, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.TIPO_SERVICIO = null;
							} else {
	                         		
        	row1.TIPO_SERVICIO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 49, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.categoria = null;
							} else {
	                         		
        	row1.categoria = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.ESTRATO = null;
							} else {
	                         		
        	row1.ESTRATO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 51, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.DESC_SERVICIO = null;
							} else {
	                         		
        	row1.DESC_SERVICIO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 52, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.orden_relacionada = null;
							} else {
	                         		
        	row1.orden_relacionada = routines.system.JDBCUtil.getString(rs_tDBInput_1, 53, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.order_activity_ID = null;
							} else {
	                         		
        	row1.order_activity_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 54, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.Adjunto = null;
							} else {
	                         		
        	row1.Adjunto = routines.system.JDBCUtil.getString(rs_tDBInput_1, 55, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.ID_SECUENCIAS_ACTA = null;
							} else {
	                         		
        	row1.ID_SECUENCIAS_ACTA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 56, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

secuencia_acta = null;


// # Output table : 'secuencia_acta'
secuencia_acta_tmp.FechaAsignacion = row1.FechaAsignacion;
secuencia_acta_tmp.Equipo_Trabajo = row1.Equipo_Trabajo;
secuencia_acta_tmp.UNIDAD_OPERATIVA = row1.UNIDAD_OPERATIVA;
secuencia_acta_tmp.Tarea = row1.Tarea;
secuencia_acta_tmp.DescTarea = row1.DescTarea;
secuencia_acta_tmp.Orden = row1.Orden;
secuencia_acta_tmp.Ciclo = row1.Ciclo;
secuencia_acta_tmp.servicio = row1.servicio;
secuencia_acta_tmp.Estado = row1.Estado;
secuencia_acta_tmp.Desc_estado = row1.Desc_estado;
secuencia_acta_tmp.FechaCREATED = row1.FechaCREATED;
secuencia_acta_tmp.Fechalegalization = row1.Fechalegalization;
secuencia_acta_tmp.Horalegalization = row1.Horalegalization;
secuencia_acta_tmp.Instalacion = row1.Instalacion;
secuencia_acta_tmp.urbano_rural = row1.urbano_rural;
secuencia_acta_tmp.ortrinur = row1.ortrinur;
secuencia_acta_tmp.descripciona = row1.descripciona;
secuencia_acta_tmp.Ciudad = row1.Ciudad;
secuencia_acta_tmp.cmrudesc = row1.cmrudesc;
secuencia_acta_tmp.region = row1.region;
secuencia_acta_tmp.regndesc = row1.regndesc;
secuencia_acta_tmp.depacodi = row1.depacodi;
secuencia_acta_tmp.codigorespuesta = row1.codigorespuesta;
secuencia_acta_tmp.respuestatencion = row1.respuestatencion;
secuencia_acta_tmp.x = row1.x;
secuencia_acta_tmp.y = row1.y;
secuencia_acta_tmp.Ano = row1.Ano;
secuencia_acta_tmp.Mes = row1.Mes;
secuencia_acta_tmp.Dia = row1.Dia;
secuencia_acta_tmp.desc_cna = row1.desc_cna;
secuencia_acta_tmp.ACTIVIDAD = row1.ACTIVIDAD;
secuencia_acta_tmp.DESC_ACTIVIDAD = row1.DESC_ACTIVIDAD;
secuencia_acta_tmp.FRECUENCIA = row1.FRECUENCIA;
secuencia_acta_tmp.CUENTAS_VENCIDAS = row1.CUENTAS_VENCIDAS;
secuencia_acta_tmp.SALDO_CUENTAS_VENCIDAS = row1.SALDO_CUENTAS_VENCIDAS;
secuencia_acta_tmp.ESTADO_CORTE = row1.ESTADO_CORTE;
secuencia_acta_tmp.TIPO_ACTIVIDAD = row1.TIPO_ACTIVIDAD;
secuencia_acta_tmp.ROUTE_ID = row1.ROUTE_ID;
secuencia_acta_tmp.NAME_ = row1.NAME_;
secuencia_acta_tmp.NUMBER_ID = row1.NUMBER_ID;
secuencia_acta_tmp.CODIGO_CAUSANL_OBS = row1.CODIGO_CAUSANL_OBS;
secuencia_acta_tmp.CAUSANL_OBS = row1.CAUSANL_OBS;
secuencia_acta_tmp.CODIGO_CAUSANL_OBS2 = row1.CODIGO_CAUSANL_OBS2;
secuencia_acta_tmp.CAUSANL_OBS2 = row1.CAUSANL_OBS2;
secuencia_acta_tmp.CODIGO_CAUSANL_OBS3 = row1.CODIGO_CAUSANL_OBS3;
secuencia_acta_tmp.CAUSANL_OBS3 = row1.CAUSANL_OBS3;
secuencia_acta_tmp.SERVICIO_SUSCRITO = row1.SERVICIO_SUSCRITO;
secuencia_acta_tmp.COD_TIPO_SERVICIO = row1.COD_TIPO_SERVICIO;
secuencia_acta_tmp.TIPO_SERVICIO = row1.TIPO_SERVICIO;
secuencia_acta_tmp.categoria = row1.categoria;
secuencia_acta_tmp.ESTRATO = row1.ESTRATO;
secuencia_acta_tmp.DESC_SERVICIO = row1.DESC_SERVICIO;
secuencia_acta_tmp.orden_relacionada = row1.orden_relacionada;
secuencia_acta_tmp.order_activity_ID = row1.order_activity_ID;
secuencia_acta_tmp.Adjunto = row1.Adjunto;
secuencia_acta_tmp.ID_SECUENCIAS_ACTA = row1.ID_SECUENCIAS_ACTA;
secuencia_acta = secuencia_acta_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "secuencia_acta"
if(secuencia_acta != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"secuencia_acta");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(secuencia_acta.FechaAsignacion != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.FechaAsignacion));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Equipo_Trabajo != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Equipo_Trabajo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.UNIDAD_OPERATIVA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.UNIDAD_OPERATIVA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Tarea != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Tarea));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.DescTarea != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.DescTarea));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Orden != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Orden));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Ciclo != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Ciclo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.servicio != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.servicio));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Estado != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Estado));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Desc_estado != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Desc_estado));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.FechaCREATED != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.FechaCREATED));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Fechalegalization != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Fechalegalization));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Horalegalization != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Horalegalization));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Instalacion != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Instalacion));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.urbano_rural != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.urbano_rural));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ortrinur != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ortrinur));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.descripciona != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.descripciona));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Ciudad != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Ciudad));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.cmrudesc != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.cmrudesc));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.region != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.region));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.regndesc != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.regndesc));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.depacodi != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.depacodi));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.codigorespuesta != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.codigorespuesta));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.respuestatencion != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.respuestatencion));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.x != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.x));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.y != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.y));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Ano != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Ano));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Mes != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Mes));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Dia != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Dia));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.desc_cna != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.desc_cna));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ACTIVIDAD != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ACTIVIDAD));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.DESC_ACTIVIDAD != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.DESC_ACTIVIDAD));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.FRECUENCIA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.FRECUENCIA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CUENTAS_VENCIDAS != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CUENTAS_VENCIDAS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.SALDO_CUENTAS_VENCIDAS != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.SALDO_CUENTAS_VENCIDAS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ESTADO_CORTE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ESTADO_CORTE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.TIPO_ACTIVIDAD != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.TIPO_ACTIVIDAD));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ROUTE_ID != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ROUTE_ID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.NAME_ != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.NAME_));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.NUMBER_ID != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.NUMBER_ID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CODIGO_CAUSANL_OBS != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CODIGO_CAUSANL_OBS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CAUSANL_OBS != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CAUSANL_OBS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CODIGO_CAUSANL_OBS2 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CODIGO_CAUSANL_OBS2));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CAUSANL_OBS2 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CAUSANL_OBS2));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CODIGO_CAUSANL_OBS3 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CODIGO_CAUSANL_OBS3));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CAUSANL_OBS3 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CAUSANL_OBS3));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.SERVICIO_SUSCRITO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.SERVICIO_SUSCRITO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.COD_TIPO_SERVICIO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.COD_TIPO_SERVICIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.TIPO_SERVICIO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.TIPO_SERVICIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.categoria != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.categoria));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ESTRATO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ESTRATO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.DESC_SERVICIO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.DESC_SERVICIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.orden_relacionada != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.orden_relacionada));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.order_activity_ID != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.order_activity_ID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.Adjunto != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.Adjunto));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ID_SECUENCIAS_ACTA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ID_SECUENCIAS_ACTA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "secuencia_acta"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"secuencia_acta");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_2Process(globalMap);



/**
 * [tFileOutputExcel_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfsecuencia_actaStruct implements routines.system.IPersistableRow<copyOfsecuencia_actaStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_exportar_acta = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[0];

	
			    public String FechaAsignacion;

				public String getFechaAsignacion () {
					return this.FechaAsignacion;
				}
				
			    public String Equipo_Trabajo;

				public String getEquipo_Trabajo () {
					return this.Equipo_Trabajo;
				}
				
			    public String UNIDAD_OPERATIVA;

				public String getUNIDAD_OPERATIVA () {
					return this.UNIDAD_OPERATIVA;
				}
				
			    public String Tarea;

				public String getTarea () {
					return this.Tarea;
				}
				
			    public String DescTarea;

				public String getDescTarea () {
					return this.DescTarea;
				}
				
			    public String Orden;

				public String getOrden () {
					return this.Orden;
				}
				
			    public String Ciclo;

				public String getCiclo () {
					return this.Ciclo;
				}
				
			    public String servicio;

				public String getServicio () {
					return this.servicio;
				}
				
			    public String Estado;

				public String getEstado () {
					return this.Estado;
				}
				
			    public String Desc_estado;

				public String getDesc_estado () {
					return this.Desc_estado;
				}
				
			    public String FechaCREATED;

				public String getFechaCREATED () {
					return this.FechaCREATED;
				}
				
			    public String Fechalegalization;

				public String getFechalegalization () {
					return this.Fechalegalization;
				}
				
			    public String Horalegalization;

				public String getHoralegalization () {
					return this.Horalegalization;
				}
				
			    public String Instalacion;

				public String getInstalacion () {
					return this.Instalacion;
				}
				
			    public String urbano_rural;

				public String getUrbano_rural () {
					return this.urbano_rural;
				}
				
			    public String ortrinur;

				public String getOrtrinur () {
					return this.ortrinur;
				}
				
			    public String descripciona;

				public String getDescripciona () {
					return this.descripciona;
				}
				
			    public String Ciudad;

				public String getCiudad () {
					return this.Ciudad;
				}
				
			    public String cmrudesc;

				public String getCmrudesc () {
					return this.cmrudesc;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String regndesc;

				public String getRegndesc () {
					return this.regndesc;
				}
				
			    public String depacodi;

				public String getDepacodi () {
					return this.depacodi;
				}
				
			    public String codigorespuesta;

				public String getCodigorespuesta () {
					return this.codigorespuesta;
				}
				
			    public String respuestatencion;

				public String getRespuestatencion () {
					return this.respuestatencion;
				}
				
			    public String x;

				public String getX () {
					return this.x;
				}
				
			    public String y;

				public String getY () {
					return this.y;
				}
				
			    public String Ano;

				public String getAno () {
					return this.Ano;
				}
				
			    public String Mes;

				public String getMes () {
					return this.Mes;
				}
				
			    public String Dia;

				public String getDia () {
					return this.Dia;
				}
				
			    public String desc_cna;

				public String getDesc_cna () {
					return this.desc_cna;
				}
				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}
				
			    public String DESC_ACTIVIDAD;

				public String getDESC_ACTIVIDAD () {
					return this.DESC_ACTIVIDAD;
				}
				
			    public String FRECUENCIA;

				public String getFRECUENCIA () {
					return this.FRECUENCIA;
				}
				
			    public String CUENTAS_VENCIDAS;

				public String getCUENTAS_VENCIDAS () {
					return this.CUENTAS_VENCIDAS;
				}
				
			    public String SALDO_CUENTAS_VENCIDAS;

				public String getSALDO_CUENTAS_VENCIDAS () {
					return this.SALDO_CUENTAS_VENCIDAS;
				}
				
			    public String ESTADO_CORTE;

				public String getESTADO_CORTE () {
					return this.ESTADO_CORTE;
				}
				
			    public String TIPO_ACTIVIDAD;

				public String getTIPO_ACTIVIDAD () {
					return this.TIPO_ACTIVIDAD;
				}
				
			    public String ROUTE_ID;

				public String getROUTE_ID () {
					return this.ROUTE_ID;
				}
				
			    public String NAME_;

				public String getNAME_ () {
					return this.NAME_;
				}
				
			    public String NUMBER_ID;

				public String getNUMBER_ID () {
					return this.NUMBER_ID;
				}
				
			    public String CODIGO_CAUSANL_OBS;

				public String getCODIGO_CAUSANL_OBS () {
					return this.CODIGO_CAUSANL_OBS;
				}
				
			    public String CAUSANL_OBS;

				public String getCAUSANL_OBS () {
					return this.CAUSANL_OBS;
				}
				
			    public String CODIGO_CAUSANL_OBS2;

				public String getCODIGO_CAUSANL_OBS2 () {
					return this.CODIGO_CAUSANL_OBS2;
				}
				
			    public String CAUSANL_OBS2;

				public String getCAUSANL_OBS2 () {
					return this.CAUSANL_OBS2;
				}
				
			    public String CODIGO_CAUSANL_OBS3;

				public String getCODIGO_CAUSANL_OBS3 () {
					return this.CODIGO_CAUSANL_OBS3;
				}
				
			    public String CAUSANL_OBS3;

				public String getCAUSANL_OBS3 () {
					return this.CAUSANL_OBS3;
				}
				
			    public String SERVICIO_SUSCRITO;

				public String getSERVICIO_SUSCRITO () {
					return this.SERVICIO_SUSCRITO;
				}
				
			    public String COD_TIPO_SERVICIO;

				public String getCOD_TIPO_SERVICIO () {
					return this.COD_TIPO_SERVICIO;
				}
				
			    public String TIPO_SERVICIO;

				public String getTIPO_SERVICIO () {
					return this.TIPO_SERVICIO;
				}
				
			    public String categoria;

				public String getCategoria () {
					return this.categoria;
				}
				
			    public String ESTRATO;

				public String getESTRATO () {
					return this.ESTRATO;
				}
				
			    public String DESC_SERVICIO;

				public String getDESC_SERVICIO () {
					return this.DESC_SERVICIO;
				}
				
			    public String orden_relacionada;

				public String getOrden_relacionada () {
					return this.orden_relacionada;
				}
				
			    public String order_activity_ID;

				public String getOrder_activity_ID () {
					return this.order_activity_ID;
				}
				
			    public String Adjunto;

				public String getAdjunto () {
					return this.Adjunto;
				}
				
			    public String ID_SECUENCIAS_ACTA;

				public String getID_SECUENCIAS_ACTA () {
					return this.ID_SECUENCIAS_ACTA;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_exportar_acta.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_exportar_acta.length == 0) {
   					commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_exportar_acta, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_exportar_acta, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_exportar_acta) {

        	try {

        		int length = 0;
		
					this.FechaAsignacion = readString(dis);
					
					this.Equipo_Trabajo = readString(dis);
					
					this.UNIDAD_OPERATIVA = readString(dis);
					
					this.Tarea = readString(dis);
					
					this.DescTarea = readString(dis);
					
					this.Orden = readString(dis);
					
					this.Ciclo = readString(dis);
					
					this.servicio = readString(dis);
					
					this.Estado = readString(dis);
					
					this.Desc_estado = readString(dis);
					
					this.FechaCREATED = readString(dis);
					
					this.Fechalegalization = readString(dis);
					
					this.Horalegalization = readString(dis);
					
					this.Instalacion = readString(dis);
					
					this.urbano_rural = readString(dis);
					
					this.ortrinur = readString(dis);
					
					this.descripciona = readString(dis);
					
					this.Ciudad = readString(dis);
					
					this.cmrudesc = readString(dis);
					
					this.region = readString(dis);
					
					this.regndesc = readString(dis);
					
					this.depacodi = readString(dis);
					
					this.codigorespuesta = readString(dis);
					
					this.respuestatencion = readString(dis);
					
					this.x = readString(dis);
					
					this.y = readString(dis);
					
					this.Ano = readString(dis);
					
					this.Mes = readString(dis);
					
					this.Dia = readString(dis);
					
					this.desc_cna = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
					this.DESC_ACTIVIDAD = readString(dis);
					
					this.FRECUENCIA = readString(dis);
					
					this.CUENTAS_VENCIDAS = readString(dis);
					
					this.SALDO_CUENTAS_VENCIDAS = readString(dis);
					
					this.ESTADO_CORTE = readString(dis);
					
					this.TIPO_ACTIVIDAD = readString(dis);
					
					this.ROUTE_ID = readString(dis);
					
					this.NAME_ = readString(dis);
					
					this.NUMBER_ID = readString(dis);
					
					this.CODIGO_CAUSANL_OBS = readString(dis);
					
					this.CAUSANL_OBS = readString(dis);
					
					this.CODIGO_CAUSANL_OBS2 = readString(dis);
					
					this.CAUSANL_OBS2 = readString(dis);
					
					this.CODIGO_CAUSANL_OBS3 = readString(dis);
					
					this.CAUSANL_OBS3 = readString(dis);
					
					this.SERVICIO_SUSCRITO = readString(dis);
					
					this.COD_TIPO_SERVICIO = readString(dis);
					
					this.TIPO_SERVICIO = readString(dis);
					
					this.categoria = readString(dis);
					
					this.ESTRATO = readString(dis);
					
					this.DESC_SERVICIO = readString(dis);
					
					this.orden_relacionada = readString(dis);
					
					this.order_activity_ID = readString(dis);
					
					this.Adjunto = readString(dis);
					
					this.ID_SECUENCIAS_ACTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FechaAsignacion,dos);
					
					// String
				
						writeString(this.Equipo_Trabajo,dos);
					
					// String
				
						writeString(this.UNIDAD_OPERATIVA,dos);
					
					// String
				
						writeString(this.Tarea,dos);
					
					// String
				
						writeString(this.DescTarea,dos);
					
					// String
				
						writeString(this.Orden,dos);
					
					// String
				
						writeString(this.Ciclo,dos);
					
					// String
				
						writeString(this.servicio,dos);
					
					// String
				
						writeString(this.Estado,dos);
					
					// String
				
						writeString(this.Desc_estado,dos);
					
					// String
				
						writeString(this.FechaCREATED,dos);
					
					// String
				
						writeString(this.Fechalegalization,dos);
					
					// String
				
						writeString(this.Horalegalization,dos);
					
					// String
				
						writeString(this.Instalacion,dos);
					
					// String
				
						writeString(this.urbano_rural,dos);
					
					// String
				
						writeString(this.ortrinur,dos);
					
					// String
				
						writeString(this.descripciona,dos);
					
					// String
				
						writeString(this.Ciudad,dos);
					
					// String
				
						writeString(this.cmrudesc,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.regndesc,dos);
					
					// String
				
						writeString(this.depacodi,dos);
					
					// String
				
						writeString(this.codigorespuesta,dos);
					
					// String
				
						writeString(this.respuestatencion,dos);
					
					// String
				
						writeString(this.x,dos);
					
					// String
				
						writeString(this.y,dos);
					
					// String
				
						writeString(this.Ano,dos);
					
					// String
				
						writeString(this.Mes,dos);
					
					// String
				
						writeString(this.Dia,dos);
					
					// String
				
						writeString(this.desc_cna,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// String
				
						writeString(this.DESC_ACTIVIDAD,dos);
					
					// String
				
						writeString(this.FRECUENCIA,dos);
					
					// String
				
						writeString(this.CUENTAS_VENCIDAS,dos);
					
					// String
				
						writeString(this.SALDO_CUENTAS_VENCIDAS,dos);
					
					// String
				
						writeString(this.ESTADO_CORTE,dos);
					
					// String
				
						writeString(this.TIPO_ACTIVIDAD,dos);
					
					// String
				
						writeString(this.ROUTE_ID,dos);
					
					// String
				
						writeString(this.NAME_,dos);
					
					// String
				
						writeString(this.NUMBER_ID,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS2,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS2,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS3,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS3,dos);
					
					// String
				
						writeString(this.SERVICIO_SUSCRITO,dos);
					
					// String
				
						writeString(this.COD_TIPO_SERVICIO,dos);
					
					// String
				
						writeString(this.TIPO_SERVICIO,dos);
					
					// String
				
						writeString(this.categoria,dos);
					
					// String
				
						writeString(this.ESTRATO,dos);
					
					// String
				
						writeString(this.DESC_SERVICIO,dos);
					
					// String
				
						writeString(this.orden_relacionada,dos);
					
					// String
				
						writeString(this.order_activity_ID,dos);
					
					// String
				
						writeString(this.Adjunto,dos);
					
					// String
				
						writeString(this.ID_SECUENCIAS_ACTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FechaAsignacion="+FechaAsignacion);
		sb.append(",Equipo_Trabajo="+Equipo_Trabajo);
		sb.append(",UNIDAD_OPERATIVA="+UNIDAD_OPERATIVA);
		sb.append(",Tarea="+Tarea);
		sb.append(",DescTarea="+DescTarea);
		sb.append(",Orden="+Orden);
		sb.append(",Ciclo="+Ciclo);
		sb.append(",servicio="+servicio);
		sb.append(",Estado="+Estado);
		sb.append(",Desc_estado="+Desc_estado);
		sb.append(",FechaCREATED="+FechaCREATED);
		sb.append(",Fechalegalization="+Fechalegalization);
		sb.append(",Horalegalization="+Horalegalization);
		sb.append(",Instalacion="+Instalacion);
		sb.append(",urbano_rural="+urbano_rural);
		sb.append(",ortrinur="+ortrinur);
		sb.append(",descripciona="+descripciona);
		sb.append(",Ciudad="+Ciudad);
		sb.append(",cmrudesc="+cmrudesc);
		sb.append(",region="+region);
		sb.append(",regndesc="+regndesc);
		sb.append(",depacodi="+depacodi);
		sb.append(",codigorespuesta="+codigorespuesta);
		sb.append(",respuestatencion="+respuestatencion);
		sb.append(",x="+x);
		sb.append(",y="+y);
		sb.append(",Ano="+Ano);
		sb.append(",Mes="+Mes);
		sb.append(",Dia="+Dia);
		sb.append(",desc_cna="+desc_cna);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",DESC_ACTIVIDAD="+DESC_ACTIVIDAD);
		sb.append(",FRECUENCIA="+FRECUENCIA);
		sb.append(",CUENTAS_VENCIDAS="+CUENTAS_VENCIDAS);
		sb.append(",SALDO_CUENTAS_VENCIDAS="+SALDO_CUENTAS_VENCIDAS);
		sb.append(",ESTADO_CORTE="+ESTADO_CORTE);
		sb.append(",TIPO_ACTIVIDAD="+TIPO_ACTIVIDAD);
		sb.append(",ROUTE_ID="+ROUTE_ID);
		sb.append(",NAME_="+NAME_);
		sb.append(",NUMBER_ID="+NUMBER_ID);
		sb.append(",CODIGO_CAUSANL_OBS="+CODIGO_CAUSANL_OBS);
		sb.append(",CAUSANL_OBS="+CAUSANL_OBS);
		sb.append(",CODIGO_CAUSANL_OBS2="+CODIGO_CAUSANL_OBS2);
		sb.append(",CAUSANL_OBS2="+CAUSANL_OBS2);
		sb.append(",CODIGO_CAUSANL_OBS3="+CODIGO_CAUSANL_OBS3);
		sb.append(",CAUSANL_OBS3="+CAUSANL_OBS3);
		sb.append(",SERVICIO_SUSCRITO="+SERVICIO_SUSCRITO);
		sb.append(",COD_TIPO_SERVICIO="+COD_TIPO_SERVICIO);
		sb.append(",TIPO_SERVICIO="+TIPO_SERVICIO);
		sb.append(",categoria="+categoria);
		sb.append(",ESTRATO="+ESTRATO);
		sb.append(",DESC_SERVICIO="+DESC_SERVICIO);
		sb.append(",orden_relacionada="+orden_relacionada);
		sb.append(",order_activity_ID="+order_activity_ID);
		sb.append(",Adjunto="+Adjunto);
		sb.append(",ID_SECUENCIAS_ACTA="+ID_SECUENCIAS_ACTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsecuencia_actaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_exportar_acta = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[0];

	
			    public String FechaAsignacion;

				public String getFechaAsignacion () {
					return this.FechaAsignacion;
				}
				
			    public String Equipo_Trabajo;

				public String getEquipo_Trabajo () {
					return this.Equipo_Trabajo;
				}
				
			    public String UNIDAD_OPERATIVA;

				public String getUNIDAD_OPERATIVA () {
					return this.UNIDAD_OPERATIVA;
				}
				
			    public String Tarea;

				public String getTarea () {
					return this.Tarea;
				}
				
			    public String DescTarea;

				public String getDescTarea () {
					return this.DescTarea;
				}
				
			    public String Orden;

				public String getOrden () {
					return this.Orden;
				}
				
			    public String Ciclo;

				public String getCiclo () {
					return this.Ciclo;
				}
				
			    public String servicio;

				public String getServicio () {
					return this.servicio;
				}
				
			    public String Estado;

				public String getEstado () {
					return this.Estado;
				}
				
			    public String Desc_estado;

				public String getDesc_estado () {
					return this.Desc_estado;
				}
				
			    public String FechaCREATED;

				public String getFechaCREATED () {
					return this.FechaCREATED;
				}
				
			    public String Fechalegalization;

				public String getFechalegalization () {
					return this.Fechalegalization;
				}
				
			    public String Horalegalization;

				public String getHoralegalization () {
					return this.Horalegalization;
				}
				
			    public String Instalacion;

				public String getInstalacion () {
					return this.Instalacion;
				}
				
			    public String urbano_rural;

				public String getUrbano_rural () {
					return this.urbano_rural;
				}
				
			    public String ortrinur;

				public String getOrtrinur () {
					return this.ortrinur;
				}
				
			    public String descripciona;

				public String getDescripciona () {
					return this.descripciona;
				}
				
			    public String Ciudad;

				public String getCiudad () {
					return this.Ciudad;
				}
				
			    public String cmrudesc;

				public String getCmrudesc () {
					return this.cmrudesc;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String regndesc;

				public String getRegndesc () {
					return this.regndesc;
				}
				
			    public String depacodi;

				public String getDepacodi () {
					return this.depacodi;
				}
				
			    public String codigorespuesta;

				public String getCodigorespuesta () {
					return this.codigorespuesta;
				}
				
			    public String respuestatencion;

				public String getRespuestatencion () {
					return this.respuestatencion;
				}
				
			    public String x;

				public String getX () {
					return this.x;
				}
				
			    public String y;

				public String getY () {
					return this.y;
				}
				
			    public String Ano;

				public String getAno () {
					return this.Ano;
				}
				
			    public String Mes;

				public String getMes () {
					return this.Mes;
				}
				
			    public String Dia;

				public String getDia () {
					return this.Dia;
				}
				
			    public String desc_cna;

				public String getDesc_cna () {
					return this.desc_cna;
				}
				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}
				
			    public String DESC_ACTIVIDAD;

				public String getDESC_ACTIVIDAD () {
					return this.DESC_ACTIVIDAD;
				}
				
			    public String FRECUENCIA;

				public String getFRECUENCIA () {
					return this.FRECUENCIA;
				}
				
			    public String CUENTAS_VENCIDAS;

				public String getCUENTAS_VENCIDAS () {
					return this.CUENTAS_VENCIDAS;
				}
				
			    public String SALDO_CUENTAS_VENCIDAS;

				public String getSALDO_CUENTAS_VENCIDAS () {
					return this.SALDO_CUENTAS_VENCIDAS;
				}
				
			    public String ESTADO_CORTE;

				public String getESTADO_CORTE () {
					return this.ESTADO_CORTE;
				}
				
			    public String TIPO_ACTIVIDAD;

				public String getTIPO_ACTIVIDAD () {
					return this.TIPO_ACTIVIDAD;
				}
				
			    public String ROUTE_ID;

				public String getROUTE_ID () {
					return this.ROUTE_ID;
				}
				
			    public String NAME_;

				public String getNAME_ () {
					return this.NAME_;
				}
				
			    public String NUMBER_ID;

				public String getNUMBER_ID () {
					return this.NUMBER_ID;
				}
				
			    public String CODIGO_CAUSANL_OBS;

				public String getCODIGO_CAUSANL_OBS () {
					return this.CODIGO_CAUSANL_OBS;
				}
				
			    public String CAUSANL_OBS;

				public String getCAUSANL_OBS () {
					return this.CAUSANL_OBS;
				}
				
			    public String CODIGO_CAUSANL_OBS2;

				public String getCODIGO_CAUSANL_OBS2 () {
					return this.CODIGO_CAUSANL_OBS2;
				}
				
			    public String CAUSANL_OBS2;

				public String getCAUSANL_OBS2 () {
					return this.CAUSANL_OBS2;
				}
				
			    public String CODIGO_CAUSANL_OBS3;

				public String getCODIGO_CAUSANL_OBS3 () {
					return this.CODIGO_CAUSANL_OBS3;
				}
				
			    public String CAUSANL_OBS3;

				public String getCAUSANL_OBS3 () {
					return this.CAUSANL_OBS3;
				}
				
			    public String SERVICIO_SUSCRITO;

				public String getSERVICIO_SUSCRITO () {
					return this.SERVICIO_SUSCRITO;
				}
				
			    public String COD_TIPO_SERVICIO;

				public String getCOD_TIPO_SERVICIO () {
					return this.COD_TIPO_SERVICIO;
				}
				
			    public String TIPO_SERVICIO;

				public String getTIPO_SERVICIO () {
					return this.TIPO_SERVICIO;
				}
				
			    public String categoria;

				public String getCategoria () {
					return this.categoria;
				}
				
			    public String ESTRATO;

				public String getESTRATO () {
					return this.ESTRATO;
				}
				
			    public String DESC_SERVICIO;

				public String getDESC_SERVICIO () {
					return this.DESC_SERVICIO;
				}
				
			    public String orden_relacionada;

				public String getOrden_relacionada () {
					return this.orden_relacionada;
				}
				
			    public String order_activity_ID;

				public String getOrder_activity_ID () {
					return this.order_activity_ID;
				}
				
			    public String Adjunto;

				public String getAdjunto () {
					return this.Adjunto;
				}
				
			    public String ID_SECUENCIAS_ACTA;

				public String getID_SECUENCIAS_ACTA () {
					return this.ID_SECUENCIAS_ACTA;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_exportar_acta.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_exportar_acta.length == 0) {
   					commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_exportar_acta = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_exportar_acta, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_exportar_acta, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_exportar_acta) {

        	try {

        		int length = 0;
		
					this.FechaAsignacion = readString(dis);
					
					this.Equipo_Trabajo = readString(dis);
					
					this.UNIDAD_OPERATIVA = readString(dis);
					
					this.Tarea = readString(dis);
					
					this.DescTarea = readString(dis);
					
					this.Orden = readString(dis);
					
					this.Ciclo = readString(dis);
					
					this.servicio = readString(dis);
					
					this.Estado = readString(dis);
					
					this.Desc_estado = readString(dis);
					
					this.FechaCREATED = readString(dis);
					
					this.Fechalegalization = readString(dis);
					
					this.Horalegalization = readString(dis);
					
					this.Instalacion = readString(dis);
					
					this.urbano_rural = readString(dis);
					
					this.ortrinur = readString(dis);
					
					this.descripciona = readString(dis);
					
					this.Ciudad = readString(dis);
					
					this.cmrudesc = readString(dis);
					
					this.region = readString(dis);
					
					this.regndesc = readString(dis);
					
					this.depacodi = readString(dis);
					
					this.codigorespuesta = readString(dis);
					
					this.respuestatencion = readString(dis);
					
					this.x = readString(dis);
					
					this.y = readString(dis);
					
					this.Ano = readString(dis);
					
					this.Mes = readString(dis);
					
					this.Dia = readString(dis);
					
					this.desc_cna = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
					this.DESC_ACTIVIDAD = readString(dis);
					
					this.FRECUENCIA = readString(dis);
					
					this.CUENTAS_VENCIDAS = readString(dis);
					
					this.SALDO_CUENTAS_VENCIDAS = readString(dis);
					
					this.ESTADO_CORTE = readString(dis);
					
					this.TIPO_ACTIVIDAD = readString(dis);
					
					this.ROUTE_ID = readString(dis);
					
					this.NAME_ = readString(dis);
					
					this.NUMBER_ID = readString(dis);
					
					this.CODIGO_CAUSANL_OBS = readString(dis);
					
					this.CAUSANL_OBS = readString(dis);
					
					this.CODIGO_CAUSANL_OBS2 = readString(dis);
					
					this.CAUSANL_OBS2 = readString(dis);
					
					this.CODIGO_CAUSANL_OBS3 = readString(dis);
					
					this.CAUSANL_OBS3 = readString(dis);
					
					this.SERVICIO_SUSCRITO = readString(dis);
					
					this.COD_TIPO_SERVICIO = readString(dis);
					
					this.TIPO_SERVICIO = readString(dis);
					
					this.categoria = readString(dis);
					
					this.ESTRATO = readString(dis);
					
					this.DESC_SERVICIO = readString(dis);
					
					this.orden_relacionada = readString(dis);
					
					this.order_activity_ID = readString(dis);
					
					this.Adjunto = readString(dis);
					
					this.ID_SECUENCIAS_ACTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FechaAsignacion,dos);
					
					// String
				
						writeString(this.Equipo_Trabajo,dos);
					
					// String
				
						writeString(this.UNIDAD_OPERATIVA,dos);
					
					// String
				
						writeString(this.Tarea,dos);
					
					// String
				
						writeString(this.DescTarea,dos);
					
					// String
				
						writeString(this.Orden,dos);
					
					// String
				
						writeString(this.Ciclo,dos);
					
					// String
				
						writeString(this.servicio,dos);
					
					// String
				
						writeString(this.Estado,dos);
					
					// String
				
						writeString(this.Desc_estado,dos);
					
					// String
				
						writeString(this.FechaCREATED,dos);
					
					// String
				
						writeString(this.Fechalegalization,dos);
					
					// String
				
						writeString(this.Horalegalization,dos);
					
					// String
				
						writeString(this.Instalacion,dos);
					
					// String
				
						writeString(this.urbano_rural,dos);
					
					// String
				
						writeString(this.ortrinur,dos);
					
					// String
				
						writeString(this.descripciona,dos);
					
					// String
				
						writeString(this.Ciudad,dos);
					
					// String
				
						writeString(this.cmrudesc,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.regndesc,dos);
					
					// String
				
						writeString(this.depacodi,dos);
					
					// String
				
						writeString(this.codigorespuesta,dos);
					
					// String
				
						writeString(this.respuestatencion,dos);
					
					// String
				
						writeString(this.x,dos);
					
					// String
				
						writeString(this.y,dos);
					
					// String
				
						writeString(this.Ano,dos);
					
					// String
				
						writeString(this.Mes,dos);
					
					// String
				
						writeString(this.Dia,dos);
					
					// String
				
						writeString(this.desc_cna,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// String
				
						writeString(this.DESC_ACTIVIDAD,dos);
					
					// String
				
						writeString(this.FRECUENCIA,dos);
					
					// String
				
						writeString(this.CUENTAS_VENCIDAS,dos);
					
					// String
				
						writeString(this.SALDO_CUENTAS_VENCIDAS,dos);
					
					// String
				
						writeString(this.ESTADO_CORTE,dos);
					
					// String
				
						writeString(this.TIPO_ACTIVIDAD,dos);
					
					// String
				
						writeString(this.ROUTE_ID,dos);
					
					// String
				
						writeString(this.NAME_,dos);
					
					// String
				
						writeString(this.NUMBER_ID,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS2,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS2,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS3,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS3,dos);
					
					// String
				
						writeString(this.SERVICIO_SUSCRITO,dos);
					
					// String
				
						writeString(this.COD_TIPO_SERVICIO,dos);
					
					// String
				
						writeString(this.TIPO_SERVICIO,dos);
					
					// String
				
						writeString(this.categoria,dos);
					
					// String
				
						writeString(this.ESTRATO,dos);
					
					// String
				
						writeString(this.DESC_SERVICIO,dos);
					
					// String
				
						writeString(this.orden_relacionada,dos);
					
					// String
				
						writeString(this.order_activity_ID,dos);
					
					// String
				
						writeString(this.Adjunto,dos);
					
					// String
				
						writeString(this.ID_SECUENCIAS_ACTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FechaAsignacion="+FechaAsignacion);
		sb.append(",Equipo_Trabajo="+Equipo_Trabajo);
		sb.append(",UNIDAD_OPERATIVA="+UNIDAD_OPERATIVA);
		sb.append(",Tarea="+Tarea);
		sb.append(",DescTarea="+DescTarea);
		sb.append(",Orden="+Orden);
		sb.append(",Ciclo="+Ciclo);
		sb.append(",servicio="+servicio);
		sb.append(",Estado="+Estado);
		sb.append(",Desc_estado="+Desc_estado);
		sb.append(",FechaCREATED="+FechaCREATED);
		sb.append(",Fechalegalization="+Fechalegalization);
		sb.append(",Horalegalization="+Horalegalization);
		sb.append(",Instalacion="+Instalacion);
		sb.append(",urbano_rural="+urbano_rural);
		sb.append(",ortrinur="+ortrinur);
		sb.append(",descripciona="+descripciona);
		sb.append(",Ciudad="+Ciudad);
		sb.append(",cmrudesc="+cmrudesc);
		sb.append(",region="+region);
		sb.append(",regndesc="+regndesc);
		sb.append(",depacodi="+depacodi);
		sb.append(",codigorespuesta="+codigorespuesta);
		sb.append(",respuestatencion="+respuestatencion);
		sb.append(",x="+x);
		sb.append(",y="+y);
		sb.append(",Ano="+Ano);
		sb.append(",Mes="+Mes);
		sb.append(",Dia="+Dia);
		sb.append(",desc_cna="+desc_cna);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",DESC_ACTIVIDAD="+DESC_ACTIVIDAD);
		sb.append(",FRECUENCIA="+FRECUENCIA);
		sb.append(",CUENTAS_VENCIDAS="+CUENTAS_VENCIDAS);
		sb.append(",SALDO_CUENTAS_VENCIDAS="+SALDO_CUENTAS_VENCIDAS);
		sb.append(",ESTADO_CORTE="+ESTADO_CORTE);
		sb.append(",TIPO_ACTIVIDAD="+TIPO_ACTIVIDAD);
		sb.append(",ROUTE_ID="+ROUTE_ID);
		sb.append(",NAME_="+NAME_);
		sb.append(",NUMBER_ID="+NUMBER_ID);
		sb.append(",CODIGO_CAUSANL_OBS="+CODIGO_CAUSANL_OBS);
		sb.append(",CAUSANL_OBS="+CAUSANL_OBS);
		sb.append(",CODIGO_CAUSANL_OBS2="+CODIGO_CAUSANL_OBS2);
		sb.append(",CAUSANL_OBS2="+CAUSANL_OBS2);
		sb.append(",CODIGO_CAUSANL_OBS3="+CODIGO_CAUSANL_OBS3);
		sb.append(",CAUSANL_OBS3="+CAUSANL_OBS3);
		sb.append(",SERVICIO_SUSCRITO="+SERVICIO_SUSCRITO);
		sb.append(",COD_TIPO_SERVICIO="+COD_TIPO_SERVICIO);
		sb.append(",TIPO_SERVICIO="+TIPO_SERVICIO);
		sb.append(",categoria="+categoria);
		sb.append(",ESTRATO="+ESTRATO);
		sb.append(",DESC_SERVICIO="+DESC_SERVICIO);
		sb.append(",orden_relacionada="+orden_relacionada);
		sb.append(",order_activity_ID="+order_activity_ID);
		sb.append(",Adjunto="+Adjunto);
		sb.append(",ID_SECUENCIAS_ACTA="+ID_SECUENCIAS_ACTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
copyOfsecuencia_actaStruct copyOfsecuencia_acta = new copyOfsecuencia_actaStruct();





	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsecuencia_acta");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		int columnIndex_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2="C:/Users/Administrador/OneDrive - ingeomega.com/03_Procesos Informáticos/10 Alexander Orozco/01 Reporte Acta/Del 16 al 31 Acta.xlsx";
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_2.setSheet("Acta_16_31");
		xlsxTool_tFileOutputExcel_2.setAppend(false,false);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_2.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_2) {
			
				xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
			
		}
		
		xlsxTool_tFileOutputExcel_2.setFont("");
		
		if (xlsxTool_tFileOutputExcel_2.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_2.addRow();
		
		xlsxTool_tFileOutputExcel_2.addCellValue("FechaAsignacion");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Equipo_Trabajo");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("UNIDAD_OPERATIVA");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Tarea");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("DescTarea");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Orden");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Ciclo");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("servicio");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Estado");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Desc_estado");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("FechaCREATED");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Fechalegalization");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Horalegalization");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Instalacion");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("urbano_rural");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ortrinur");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("descripciona");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Ciudad");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("cmrudesc");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("region");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("regndesc");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("depacodi");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("codigorespuesta");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("respuestatencion");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("x");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("y");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Ano");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Mes");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Dia");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("desc_cna");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ACTIVIDAD");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("DESC_ACTIVIDAD");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("FRECUENCIA");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("CUENTAS_VENCIDAS");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("SALDO_CUENTAS_VENCIDAS");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ESTADO_CORTE");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("TIPO_ACTIVIDAD");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ROUTE_ID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("NAME_");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("NUMBER_ID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("CODIGO_CAUSANL_OBS");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("CAUSANL_OBS");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("CODIGO_CAUSANL_OBS2");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("CAUSANL_OBS2");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("CODIGO_CAUSANL_OBS3");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("CAUSANL_OBS3");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("SERVICIO_SUSCRITO");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("COD_TIPO_SERVICIO");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("TIPO_SERVICIO");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("categoria");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ESTRATO");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("DESC_SERVICIO");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("orden_relacionada");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("order_activity_ID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Adjunto");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ID_SECUENCIAS_ACTA");
		
		nb_line_tFileOutputExcel_2++; 
		
	}
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsecuencia_actaStruct copyOfsecuencia_acta_tmp = new copyOfsecuencia_actaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.mariadb.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "lectura";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:0Fy2s0MMxLN0AtgvUaP2O+ybG4lB8Ek0HmysKvsjbzDIs2Kl6FofwoI=");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:mariadb://" + "192.168.4.240" + ":" + "3306" + "/" + "ingeomega" + "?" + "noDatetimeStringSync=true";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT `FechaAsignacion`\n   , `Equipo_Trabajo`\n   , `UNIDAD_OPERATIVA`\n   , `Tarea`\n   , `DescTarea`\n   , `Orden`"
+"\n   , `Ciclo`\n   , `servicio`\n   , `Estado`\n   , `Desc_estado`\n   , `FechaCREATED`\n   , `Fechalegalization`\n   , `"
+"Horalegalization`\n   , `Instalacion`\n   , `urbano_rural`\n   , `ortrinur`\n   , `descripciona`\n   , `Ciudad`\n   , `c"
+"mrudesc`\n   , `region`\n   , `regndesc`\n   , `depacodi`\n   , `codigorespuesta`\n   , `respuestatencion`\n   , `x`\n  "
+" , `y`\n   , `Ano`\n   , `Mes`\n   , `Dia`\n   , `desc_cna`\n   , `ACTIVIDAD`\n   , `DESC_ACTIVIDAD`\n   , `FRECUENCIA`"
+"\n   , `CUENTAS_VENCIDAS`\n   , `SALDO_CUENTAS_VENCIDAS`\n   , `ESTADO_CORTE`\n   , `TIPO_ACTIVIDAD`\n   , `ROUTE_ID`\n  "
+" , `NAME_`\n   , `NUMBER_ID`\n   , `CODIGO_CAUSANL_OBS`\n   , `CAUSANL_OBS`\n   , `CODIGO_CAUSANL_OBS2`\n   , `CAUSANL_O"
+"BS2`\n   , `CODIGO_CAUSANL_OBS3`\n   , `CAUSANL_OBS3`\n   , `SERVICIO_SUSCRITO`\n   , `COD_TIPO_SERVICIO`\n   , `TIPO_SE"
+"RVICIO`\n   , `categoria`\n   , `ESTRATO`\n   , `DESC_SERVICIO`\n   , `orden_relacionada`\n   , `order_activity_ID`\n   "
+", `Adjunto`\n   , `ID_SECUENCIAS_ACTA`\nFROM secuencias_acta\nwhere Fechalegalization>= (select (CONCAT(COD_ANO,COD_MES,"
+"'16')) from consulta_fecha_acta)\nAND Fechalegalization<= (select (CONCAT(COD_ANO,COD_MES,'31')) from consulta_fecha_act"
+"a)";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.FechaAsignacion = null;
							} else {
	                         		
        	row2.FechaAsignacion = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.Equipo_Trabajo = null;
							} else {
	                         		
        	row2.Equipo_Trabajo = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.UNIDAD_OPERATIVA = null;
							} else {
	                         		
        	row2.UNIDAD_OPERATIVA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.Tarea = null;
							} else {
	                         		
        	row2.Tarea = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.DescTarea = null;
							} else {
	                         		
        	row2.DescTarea = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.Orden = null;
							} else {
	                         		
        	row2.Orden = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row2.Ciclo = null;
							} else {
	                         		
        	row2.Ciclo = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row2.servicio = null;
							} else {
	                         		
        	row2.servicio = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row2.Estado = null;
							} else {
	                         		
        	row2.Estado = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row2.Desc_estado = null;
							} else {
	                         		
        	row2.Desc_estado = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row2.FechaCREATED = null;
							} else {
	                         		
        	row2.FechaCREATED = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row2.Fechalegalization = null;
							} else {
	                         		
        	row2.Fechalegalization = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row2.Horalegalization = null;
							} else {
	                         		
        	row2.Horalegalization = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row2.Instalacion = null;
							} else {
	                         		
        	row2.Instalacion = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row2.urbano_rural = null;
							} else {
	                         		
        	row2.urbano_rural = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row2.ortrinur = null;
							} else {
	                         		
        	row2.ortrinur = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row2.descripciona = null;
							} else {
	                         		
        	row2.descripciona = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row2.Ciudad = null;
							} else {
	                         		
        	row2.Ciudad = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row2.cmrudesc = null;
							} else {
	                         		
        	row2.cmrudesc = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row2.region = null;
							} else {
	                         		
        	row2.region = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row2.regndesc = null;
							} else {
	                         		
        	row2.regndesc = routines.system.JDBCUtil.getString(rs_tDBInput_2, 21, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								row2.depacodi = null;
							} else {
	                         		
        	row2.depacodi = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								row2.codigorespuesta = null;
							} else {
	                         		
        	row2.codigorespuesta = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 24) {
								row2.respuestatencion = null;
							} else {
	                         		
        	row2.respuestatencion = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 25) {
								row2.x = null;
							} else {
	                         		
        	row2.x = routines.system.JDBCUtil.getString(rs_tDBInput_2, 25, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 26) {
								row2.y = null;
							} else {
	                         		
        	row2.y = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 27) {
								row2.Ano = null;
							} else {
	                         		
        	row2.Ano = routines.system.JDBCUtil.getString(rs_tDBInput_2, 27, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 28) {
								row2.Mes = null;
							} else {
	                         		
        	row2.Mes = routines.system.JDBCUtil.getString(rs_tDBInput_2, 28, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 29) {
								row2.Dia = null;
							} else {
	                         		
        	row2.Dia = routines.system.JDBCUtil.getString(rs_tDBInput_2, 29, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 30) {
								row2.desc_cna = null;
							} else {
	                         		
        	row2.desc_cna = routines.system.JDBCUtil.getString(rs_tDBInput_2, 30, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 31) {
								row2.ACTIVIDAD = null;
							} else {
	                         		
        	row2.ACTIVIDAD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 31, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 32) {
								row2.DESC_ACTIVIDAD = null;
							} else {
	                         		
        	row2.DESC_ACTIVIDAD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 32, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 33) {
								row2.FRECUENCIA = null;
							} else {
	                         		
        	row2.FRECUENCIA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 33, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 34) {
								row2.CUENTAS_VENCIDAS = null;
							} else {
	                         		
        	row2.CUENTAS_VENCIDAS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 34, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 35) {
								row2.SALDO_CUENTAS_VENCIDAS = null;
							} else {
	                         		
        	row2.SALDO_CUENTAS_VENCIDAS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 35, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 36) {
								row2.ESTADO_CORTE = null;
							} else {
	                         		
        	row2.ESTADO_CORTE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 36, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 37) {
								row2.TIPO_ACTIVIDAD = null;
							} else {
	                         		
        	row2.TIPO_ACTIVIDAD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 37, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 38) {
								row2.ROUTE_ID = null;
							} else {
	                         		
        	row2.ROUTE_ID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 38, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 39) {
								row2.NAME_ = null;
							} else {
	                         		
        	row2.NAME_ = routines.system.JDBCUtil.getString(rs_tDBInput_2, 39, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 40) {
								row2.NUMBER_ID = null;
							} else {
	                         		
        	row2.NUMBER_ID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 40, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 41) {
								row2.CODIGO_CAUSANL_OBS = null;
							} else {
	                         		
        	row2.CODIGO_CAUSANL_OBS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 41, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 42) {
								row2.CAUSANL_OBS = null;
							} else {
	                         		
        	row2.CAUSANL_OBS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 42, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 43) {
								row2.CODIGO_CAUSANL_OBS2 = null;
							} else {
	                         		
        	row2.CODIGO_CAUSANL_OBS2 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 43, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 44) {
								row2.CAUSANL_OBS2 = null;
							} else {
	                         		
        	row2.CAUSANL_OBS2 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 44, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 45) {
								row2.CODIGO_CAUSANL_OBS3 = null;
							} else {
	                         		
        	row2.CODIGO_CAUSANL_OBS3 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 45, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 46) {
								row2.CAUSANL_OBS3 = null;
							} else {
	                         		
        	row2.CAUSANL_OBS3 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 46, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 47) {
								row2.SERVICIO_SUSCRITO = null;
							} else {
	                         		
        	row2.SERVICIO_SUSCRITO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 47, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 48) {
								row2.COD_TIPO_SERVICIO = null;
							} else {
	                         		
        	row2.COD_TIPO_SERVICIO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 48, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 49) {
								row2.TIPO_SERVICIO = null;
							} else {
	                         		
        	row2.TIPO_SERVICIO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 49, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 50) {
								row2.categoria = null;
							} else {
	                         		
        	row2.categoria = routines.system.JDBCUtil.getString(rs_tDBInput_2, 50, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 51) {
								row2.ESTRATO = null;
							} else {
	                         		
        	row2.ESTRATO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 51, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 52) {
								row2.DESC_SERVICIO = null;
							} else {
	                         		
        	row2.DESC_SERVICIO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 52, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 53) {
								row2.orden_relacionada = null;
							} else {
	                         		
        	row2.orden_relacionada = routines.system.JDBCUtil.getString(rs_tDBInput_2, 53, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 54) {
								row2.order_activity_ID = null;
							} else {
	                         		
        	row2.order_activity_ID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 54, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 55) {
								row2.Adjunto = null;
							} else {
	                         		
        	row2.Adjunto = routines.system.JDBCUtil.getString(rs_tDBInput_2, 55, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 56) {
								row2.ID_SECUENCIAS_ACTA = null;
							} else {
	                         		
        	row2.ID_SECUENCIAS_ACTA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 56, false);
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

copyOfsecuencia_acta = null;


// # Output table : 'copyOfsecuencia_acta'
copyOfsecuencia_acta_tmp.FechaAsignacion = row2.FechaAsignacion;
copyOfsecuencia_acta_tmp.Equipo_Trabajo = row2.Equipo_Trabajo;
copyOfsecuencia_acta_tmp.UNIDAD_OPERATIVA = row2.UNIDAD_OPERATIVA;
copyOfsecuencia_acta_tmp.Tarea = row2.Tarea;
copyOfsecuencia_acta_tmp.DescTarea = row2.DescTarea;
copyOfsecuencia_acta_tmp.Orden = row2.Orden;
copyOfsecuencia_acta_tmp.Ciclo = row2.Ciclo;
copyOfsecuencia_acta_tmp.servicio = row2.servicio;
copyOfsecuencia_acta_tmp.Estado = row2.Estado;
copyOfsecuencia_acta_tmp.Desc_estado = row2.Desc_estado;
copyOfsecuencia_acta_tmp.FechaCREATED = row2.FechaCREATED;
copyOfsecuencia_acta_tmp.Fechalegalization = row2.Fechalegalization;
copyOfsecuencia_acta_tmp.Horalegalization = row2.Horalegalization;
copyOfsecuencia_acta_tmp.Instalacion = row2.Instalacion;
copyOfsecuencia_acta_tmp.urbano_rural = row2.urbano_rural;
copyOfsecuencia_acta_tmp.ortrinur = row2.ortrinur;
copyOfsecuencia_acta_tmp.descripciona = row2.descripciona;
copyOfsecuencia_acta_tmp.Ciudad = row2.Ciudad;
copyOfsecuencia_acta_tmp.cmrudesc = row2.cmrudesc;
copyOfsecuencia_acta_tmp.region = row2.region;
copyOfsecuencia_acta_tmp.regndesc = row2.regndesc;
copyOfsecuencia_acta_tmp.depacodi = row2.depacodi;
copyOfsecuencia_acta_tmp.codigorespuesta = row2.codigorespuesta;
copyOfsecuencia_acta_tmp.respuestatencion = row2.respuestatencion;
copyOfsecuencia_acta_tmp.x = row2.x;
copyOfsecuencia_acta_tmp.y = row2.y;
copyOfsecuencia_acta_tmp.Ano = row2.Ano;
copyOfsecuencia_acta_tmp.Mes = row2.Mes;
copyOfsecuencia_acta_tmp.Dia = row2.Dia;
copyOfsecuencia_acta_tmp.desc_cna = row2.desc_cna;
copyOfsecuencia_acta_tmp.ACTIVIDAD = row2.ACTIVIDAD;
copyOfsecuencia_acta_tmp.DESC_ACTIVIDAD = row2.DESC_ACTIVIDAD;
copyOfsecuencia_acta_tmp.FRECUENCIA = row2.FRECUENCIA;
copyOfsecuencia_acta_tmp.CUENTAS_VENCIDAS = row2.CUENTAS_VENCIDAS;
copyOfsecuencia_acta_tmp.SALDO_CUENTAS_VENCIDAS = row2.SALDO_CUENTAS_VENCIDAS;
copyOfsecuencia_acta_tmp.ESTADO_CORTE = row2.ESTADO_CORTE;
copyOfsecuencia_acta_tmp.TIPO_ACTIVIDAD = row2.TIPO_ACTIVIDAD;
copyOfsecuencia_acta_tmp.ROUTE_ID = row2.ROUTE_ID;
copyOfsecuencia_acta_tmp.NAME_ = row2.NAME_;
copyOfsecuencia_acta_tmp.NUMBER_ID = row2.NUMBER_ID;
copyOfsecuencia_acta_tmp.CODIGO_CAUSANL_OBS = row2.CODIGO_CAUSANL_OBS;
copyOfsecuencia_acta_tmp.CAUSANL_OBS = row2.CAUSANL_OBS;
copyOfsecuencia_acta_tmp.CODIGO_CAUSANL_OBS2 = row2.CODIGO_CAUSANL_OBS2;
copyOfsecuencia_acta_tmp.CAUSANL_OBS2 = row2.CAUSANL_OBS2;
copyOfsecuencia_acta_tmp.CODIGO_CAUSANL_OBS3 = row2.CODIGO_CAUSANL_OBS3;
copyOfsecuencia_acta_tmp.CAUSANL_OBS3 = row2.CAUSANL_OBS3;
copyOfsecuencia_acta_tmp.SERVICIO_SUSCRITO = row2.SERVICIO_SUSCRITO;
copyOfsecuencia_acta_tmp.COD_TIPO_SERVICIO = row2.COD_TIPO_SERVICIO;
copyOfsecuencia_acta_tmp.TIPO_SERVICIO = row2.TIPO_SERVICIO;
copyOfsecuencia_acta_tmp.categoria = row2.categoria;
copyOfsecuencia_acta_tmp.ESTRATO = row2.ESTRATO;
copyOfsecuencia_acta_tmp.DESC_SERVICIO = row2.DESC_SERVICIO;
copyOfsecuencia_acta_tmp.orden_relacionada = row2.orden_relacionada;
copyOfsecuencia_acta_tmp.order_activity_ID = row2.order_activity_ID;
copyOfsecuencia_acta_tmp.Adjunto = row2.Adjunto;
copyOfsecuencia_acta_tmp.ID_SECUENCIAS_ACTA = row2.ID_SECUENCIAS_ACTA;
copyOfsecuencia_acta = copyOfsecuencia_acta_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfsecuencia_acta"
if(copyOfsecuencia_acta != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsecuencia_acta");
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(copyOfsecuencia_acta.FechaAsignacion != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.FechaAsignacion));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Equipo_Trabajo != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Equipo_Trabajo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.UNIDAD_OPERATIVA != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.UNIDAD_OPERATIVA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Tarea != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Tarea));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.DescTarea != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.DescTarea));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Orden != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Orden));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Ciclo != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Ciclo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.servicio != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.servicio));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Estado != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Estado));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Desc_estado != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Desc_estado));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.FechaCREATED != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.FechaCREATED));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Fechalegalization != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Fechalegalization));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Horalegalization != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Horalegalization));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Instalacion != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Instalacion));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.urbano_rural != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.urbano_rural));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.ortrinur != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.ortrinur));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.descripciona != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.descripciona));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Ciudad != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Ciudad));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.cmrudesc != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.cmrudesc));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.region != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.region));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.regndesc != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.regndesc));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.depacodi != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.depacodi));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.codigorespuesta != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.codigorespuesta));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.respuestatencion != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.respuestatencion));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.x != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.x));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.y != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.y));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Ano != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Ano));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Mes != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Mes));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Dia != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Dia));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.desc_cna != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.desc_cna));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.ACTIVIDAD != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.ACTIVIDAD));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.DESC_ACTIVIDAD != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.DESC_ACTIVIDAD));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.FRECUENCIA != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.FRECUENCIA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.CUENTAS_VENCIDAS != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.CUENTAS_VENCIDAS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.SALDO_CUENTAS_VENCIDAS != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.SALDO_CUENTAS_VENCIDAS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.ESTADO_CORTE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.ESTADO_CORTE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.TIPO_ACTIVIDAD != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.TIPO_ACTIVIDAD));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.ROUTE_ID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.ROUTE_ID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.NAME_ != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.NAME_));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.NUMBER_ID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.NUMBER_ID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.CODIGO_CAUSANL_OBS != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.CODIGO_CAUSANL_OBS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.CAUSANL_OBS != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.CAUSANL_OBS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.CODIGO_CAUSANL_OBS2 != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.CODIGO_CAUSANL_OBS2));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.CAUSANL_OBS2 != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.CAUSANL_OBS2));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.CODIGO_CAUSANL_OBS3 != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.CODIGO_CAUSANL_OBS3));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.CAUSANL_OBS3 != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.CAUSANL_OBS3));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.SERVICIO_SUSCRITO != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.SERVICIO_SUSCRITO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.COD_TIPO_SERVICIO != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.COD_TIPO_SERVICIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.TIPO_SERVICIO != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.TIPO_SERVICIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.categoria != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.categoria));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.ESTRATO != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.ESTRATO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.DESC_SERVICIO != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.DESC_SERVICIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.orden_relacionada != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.orden_relacionada));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.order_activity_ID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.order_activity_ID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.Adjunto != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.Adjunto));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfsecuencia_acta.ID_SECUENCIAS_ACTA != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(copyOfsecuencia_acta.ID_SECUENCIAS_ACTA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */

} // End of branch "copyOfsecuencia_acta"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
		


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsecuencia_acta");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final exportar_acta exportar_actaClass = new exportar_acta();

        int exitCode = exportar_actaClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = exportar_acta.class.getClassLoader().getResourceAsStream("local_project/exportar_acta_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = exportar_acta.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : exportar_acta");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     195432 characters generated by Talend Open Studio for Big Data 
 *     on the 27 de septiembre de 2021 09:11:05 AM COT
 ************************************************************************************************/