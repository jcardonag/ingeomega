// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.exportar_lectura_oriente_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: exportar_lectura_oriente Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class exportar_lectura_oriente implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "exportar_lectura_oriente";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				exportar_lectura_oriente.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(exportar_lectura_oriente.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class secuencia_actaStruct implements routines.system.IPersistableRow<secuencia_actaStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_exportar_lectura_oriente = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ID_LECTURA;

				public String getID_LECTURA () {
					return this.ID_LECTURA;
				}
				
			    public String CONSECUTIVO_REPORTE;

				public String getCONSECUTIVO_REPORTE () {
					return this.CONSECUTIVO_REPORTE;
				}
				
			    public String PERIODO_CONSUMO;

				public String getPERIODO_CONSUMO () {
					return this.PERIODO_CONSUMO;
				}
				
			    public String PERIODO_FACTURACION;

				public String getPERIODO_FACTURACION () {
					return this.PERIODO_FACTURACION;
				}
				
			    public String ANO_FACTURACION;

				public String getANO_FACTURACION () {
					return this.ANO_FACTURACION;
				}
				
			    public String MES_FACTURACION;

				public String getMES_FACTURACION () {
					return this.MES_FACTURACION;
				}
				
			    public String CONSECUTIVO_LECTURA;

				public String getCONSECUTIVO_LECTURA () {
					return this.CONSECUTIVO_LECTURA;
				}
				
			    public String LECTURA_ANTERIOR;

				public String getLECTURA_ANTERIOR () {
					return this.LECTURA_ANTERIOR;
				}
				
			    public String LECTURA_TOMADA;

				public String getLECTURA_TOMADA () {
					return this.LECTURA_TOMADA;
				}
				
			    public String LECTURA_ORIGINAL;

				public String getLECTURA_ORIGINAL () {
					return this.LECTURA_ORIGINAL;
				}
				
			    public String FECHA_LECTURA_ANTERIOR;

				public String getFECHA_LECTURA_ANTERIOR () {
					return this.FECHA_LECTURA_ANTERIOR;
				}
				
			    public String FECHA_LECTURA_ACTUAL;

				public String getFECHA_LECTURA_ACTUAL () {
					return this.FECHA_LECTURA_ACTUAL;
				}
				
			    public String CODIGO_CAUSANL_OBS;

				public String getCODIGO_CAUSANL_OBS () {
					return this.CODIGO_CAUSANL_OBS;
				}
				
			    public String CAUSANL_OBS;

				public String getCAUSANL_OBS () {
					return this.CAUSANL_OBS;
				}
				
			    public String CODIGO_OBS_ADIC;

				public String getCODIGO_OBS_ADIC () {
					return this.CODIGO_OBS_ADIC;
				}
				
			    public String OBS_ADIC;

				public String getOBS_ADIC () {
					return this.OBS_ADIC;
				}
				
			    public String OBSERV_ALFANUM;

				public String getOBSERV_ALFANUM () {
					return this.OBSERV_ALFANUM;
				}
				
			    public String ADVERTENCIA_LECT;

				public String getADVERTENCIA_LECT () {
					return this.ADVERTENCIA_LECT;
				}
				
			    public String COD_TIPO_CONSUMO;

				public String getCOD_TIPO_CONSUMO () {
					return this.COD_TIPO_CONSUMO;
				}
				
			    public String TIPO_CONSUMO;

				public String getTIPO_CONSUMO () {
					return this.TIPO_CONSUMO;
				}
				
			    public String COD_CICLO;

				public String getCOD_CICLO () {
					return this.COD_CICLO;
				}
				
			    public String COD_CATEGORIA_SERVICIO;

				public String getCOD_CATEGORIA_SERVICIO () {
					return this.COD_CATEGORIA_SERVICIO;
				}
				
			    public String CATEGORIA_SERVICIO;

				public String getCATEGORIA_SERVICIO () {
					return this.CATEGORIA_SERVICIO;
				}
				
			    public String COD_SUBCATEGORIA_SERVICIO;

				public String getCOD_SUBCATEGORIA_SERVICIO () {
					return this.COD_SUBCATEGORIA_SERVICIO;
				}
				
			    public String SUBCATEGORIA_SERVICIO;

				public String getSUBCATEGORIA_SERVICIO () {
					return this.SUBCATEGORIA_SERVICIO;
				}
				
			    public String ORDEN_LECTURA;

				public String getORDEN_LECTURA () {
					return this.ORDEN_LECTURA;
				}
				
			    public String ACTIVIDAD_LECTURA;

				public String getACTIVIDAD_LECTURA () {
					return this.ACTIVIDAD_LECTURA;
				}
				
			    public String RUTA_LECTURA;

				public String getRUTA_LECTURA () {
					return this.RUTA_LECTURA;
				}
				
			    public String CONSECUTIVO_RUTA_LECTURA;

				public String getCONSECUTIVO_RUTA_LECTURA () {
					return this.CONSECUTIVO_RUTA_LECTURA;
				}
				
			    public String INSTALACION;

				public String getINSTALACION () {
					return this.INSTALACION;
				}
				
			    public String ID_DIRECCION;

				public String getID_DIRECCION () {
					return this.ID_DIRECCION;
				}
				
			    public String ID_ZONA_OPERATIVA;

				public String getID_ZONA_OPERATIVA () {
					return this.ID_ZONA_OPERATIVA;
				}
				
			    public String ZONA_OPERATIVA;

				public String getZONA_OPERATIVA () {
					return this.ZONA_OPERATIVA;
				}
				
			    public String MUNICIPIO;

				public String getMUNICIPIO () {
					return this.MUNICIPIO;
				}
				
			    public String UNIDAD_OPERATIVA;

				public String getUNIDAD_OPERATIVA () {
					return this.UNIDAD_OPERATIVA;
				}
				
			    public String IDENTIFICACION;

				public String getIDENTIFICACION () {
					return this.IDENTIFICACION;
				}
				
			    public String CONSUMO_LEIDO;

				public String getCONSUMO_LEIDO () {
					return this.CONSUMO_LEIDO;
				}
				
			    public String CONSUMO_PROMEDIO;

				public String getCONSUMO_PROMEDIO () {
					return this.CONSUMO_PROMEDIO;
				}
				
			    public String CONSUMO_CORREGIDO;

				public String getCONSUMO_CORREGIDO () {
					return this.CONSUMO_CORREGIDO;
				}
				
			    public String CONSUMO_FACTURADO;

				public String getCONSUMO_FACTURADO () {
					return this.CONSUMO_FACTURADO;
				}
				
			    public String FRECUENCIA_LECT;

				public String getFRECUENCIA_LECT () {
					return this.FRECUENCIA_LECT;
				}
				
			    public String COORDENADA_X;

				public String getCOORDENADA_X () {
					return this.COORDENADA_X;
				}
				
			    public String COORDENADA_Y;

				public String getCOORDENADA_Y () {
					return this.COORDENADA_Y;
				}
				
			    public String urbano_rural;

				public String getUrbano_rural () {
					return this.urbano_rural;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID_LECTURA == null) ? 0 : this.ID_LECTURA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final secuencia_actaStruct other = (secuencia_actaStruct) obj;
		
						if (this.ID_LECTURA == null) {
							if (other.ID_LECTURA != null)
								return false;
						
						} else if (!this.ID_LECTURA.equals(other.ID_LECTURA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(secuencia_actaStruct other) {

		other.ID_LECTURA = this.ID_LECTURA;
	            other.CONSECUTIVO_REPORTE = this.CONSECUTIVO_REPORTE;
	            other.PERIODO_CONSUMO = this.PERIODO_CONSUMO;
	            other.PERIODO_FACTURACION = this.PERIODO_FACTURACION;
	            other.ANO_FACTURACION = this.ANO_FACTURACION;
	            other.MES_FACTURACION = this.MES_FACTURACION;
	            other.CONSECUTIVO_LECTURA = this.CONSECUTIVO_LECTURA;
	            other.LECTURA_ANTERIOR = this.LECTURA_ANTERIOR;
	            other.LECTURA_TOMADA = this.LECTURA_TOMADA;
	            other.LECTURA_ORIGINAL = this.LECTURA_ORIGINAL;
	            other.FECHA_LECTURA_ANTERIOR = this.FECHA_LECTURA_ANTERIOR;
	            other.FECHA_LECTURA_ACTUAL = this.FECHA_LECTURA_ACTUAL;
	            other.CODIGO_CAUSANL_OBS = this.CODIGO_CAUSANL_OBS;
	            other.CAUSANL_OBS = this.CAUSANL_OBS;
	            other.CODIGO_OBS_ADIC = this.CODIGO_OBS_ADIC;
	            other.OBS_ADIC = this.OBS_ADIC;
	            other.OBSERV_ALFANUM = this.OBSERV_ALFANUM;
	            other.ADVERTENCIA_LECT = this.ADVERTENCIA_LECT;
	            other.COD_TIPO_CONSUMO = this.COD_TIPO_CONSUMO;
	            other.TIPO_CONSUMO = this.TIPO_CONSUMO;
	            other.COD_CICLO = this.COD_CICLO;
	            other.COD_CATEGORIA_SERVICIO = this.COD_CATEGORIA_SERVICIO;
	            other.CATEGORIA_SERVICIO = this.CATEGORIA_SERVICIO;
	            other.COD_SUBCATEGORIA_SERVICIO = this.COD_SUBCATEGORIA_SERVICIO;
	            other.SUBCATEGORIA_SERVICIO = this.SUBCATEGORIA_SERVICIO;
	            other.ORDEN_LECTURA = this.ORDEN_LECTURA;
	            other.ACTIVIDAD_LECTURA = this.ACTIVIDAD_LECTURA;
	            other.RUTA_LECTURA = this.RUTA_LECTURA;
	            other.CONSECUTIVO_RUTA_LECTURA = this.CONSECUTIVO_RUTA_LECTURA;
	            other.INSTALACION = this.INSTALACION;
	            other.ID_DIRECCION = this.ID_DIRECCION;
	            other.ID_ZONA_OPERATIVA = this.ID_ZONA_OPERATIVA;
	            other.ZONA_OPERATIVA = this.ZONA_OPERATIVA;
	            other.MUNICIPIO = this.MUNICIPIO;
	            other.UNIDAD_OPERATIVA = this.UNIDAD_OPERATIVA;
	            other.IDENTIFICACION = this.IDENTIFICACION;
	            other.CONSUMO_LEIDO = this.CONSUMO_LEIDO;
	            other.CONSUMO_PROMEDIO = this.CONSUMO_PROMEDIO;
	            other.CONSUMO_CORREGIDO = this.CONSUMO_CORREGIDO;
	            other.CONSUMO_FACTURADO = this.CONSUMO_FACTURADO;
	            other.FRECUENCIA_LECT = this.FRECUENCIA_LECT;
	            other.COORDENADA_X = this.COORDENADA_X;
	            other.COORDENADA_Y = this.COORDENADA_Y;
	            other.urbano_rural = this.urbano_rural;
	            
	}

	public void copyKeysDataTo(secuencia_actaStruct other) {

		other.ID_LECTURA = this.ID_LECTURA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente.length == 0) {
   					commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_exportar_lectura_oriente) {

        	try {

        		int length = 0;
		
					this.ID_LECTURA = readString(dis);
					
					this.CONSECUTIVO_REPORTE = readString(dis);
					
					this.PERIODO_CONSUMO = readString(dis);
					
					this.PERIODO_FACTURACION = readString(dis);
					
					this.ANO_FACTURACION = readString(dis);
					
					this.MES_FACTURACION = readString(dis);
					
					this.CONSECUTIVO_LECTURA = readString(dis);
					
					this.LECTURA_ANTERIOR = readString(dis);
					
					this.LECTURA_TOMADA = readString(dis);
					
					this.LECTURA_ORIGINAL = readString(dis);
					
					this.FECHA_LECTURA_ANTERIOR = readString(dis);
					
					this.FECHA_LECTURA_ACTUAL = readString(dis);
					
					this.CODIGO_CAUSANL_OBS = readString(dis);
					
					this.CAUSANL_OBS = readString(dis);
					
					this.CODIGO_OBS_ADIC = readString(dis);
					
					this.OBS_ADIC = readString(dis);
					
					this.OBSERV_ALFANUM = readString(dis);
					
					this.ADVERTENCIA_LECT = readString(dis);
					
					this.COD_TIPO_CONSUMO = readString(dis);
					
					this.TIPO_CONSUMO = readString(dis);
					
					this.COD_CICLO = readString(dis);
					
					this.COD_CATEGORIA_SERVICIO = readString(dis);
					
					this.CATEGORIA_SERVICIO = readString(dis);
					
					this.COD_SUBCATEGORIA_SERVICIO = readString(dis);
					
					this.SUBCATEGORIA_SERVICIO = readString(dis);
					
					this.ORDEN_LECTURA = readString(dis);
					
					this.ACTIVIDAD_LECTURA = readString(dis);
					
					this.RUTA_LECTURA = readString(dis);
					
					this.CONSECUTIVO_RUTA_LECTURA = readString(dis);
					
					this.INSTALACION = readString(dis);
					
					this.ID_DIRECCION = readString(dis);
					
					this.ID_ZONA_OPERATIVA = readString(dis);
					
					this.ZONA_OPERATIVA = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.UNIDAD_OPERATIVA = readString(dis);
					
					this.IDENTIFICACION = readString(dis);
					
					this.CONSUMO_LEIDO = readString(dis);
					
					this.CONSUMO_PROMEDIO = readString(dis);
					
					this.CONSUMO_CORREGIDO = readString(dis);
					
					this.CONSUMO_FACTURADO = readString(dis);
					
					this.FRECUENCIA_LECT = readString(dis);
					
					this.COORDENADA_X = readString(dis);
					
					this.COORDENADA_Y = readString(dis);
					
					this.urbano_rural = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID_LECTURA,dos);
					
					// String
				
						writeString(this.CONSECUTIVO_REPORTE,dos);
					
					// String
				
						writeString(this.PERIODO_CONSUMO,dos);
					
					// String
				
						writeString(this.PERIODO_FACTURACION,dos);
					
					// String
				
						writeString(this.ANO_FACTURACION,dos);
					
					// String
				
						writeString(this.MES_FACTURACION,dos);
					
					// String
				
						writeString(this.CONSECUTIVO_LECTURA,dos);
					
					// String
				
						writeString(this.LECTURA_ANTERIOR,dos);
					
					// String
				
						writeString(this.LECTURA_TOMADA,dos);
					
					// String
				
						writeString(this.LECTURA_ORIGINAL,dos);
					
					// String
				
						writeString(this.FECHA_LECTURA_ANTERIOR,dos);
					
					// String
				
						writeString(this.FECHA_LECTURA_ACTUAL,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CODIGO_OBS_ADIC,dos);
					
					// String
				
						writeString(this.OBS_ADIC,dos);
					
					// String
				
						writeString(this.OBSERV_ALFANUM,dos);
					
					// String
				
						writeString(this.ADVERTENCIA_LECT,dos);
					
					// String
				
						writeString(this.COD_TIPO_CONSUMO,dos);
					
					// String
				
						writeString(this.TIPO_CONSUMO,dos);
					
					// String
				
						writeString(this.COD_CICLO,dos);
					
					// String
				
						writeString(this.COD_CATEGORIA_SERVICIO,dos);
					
					// String
				
						writeString(this.CATEGORIA_SERVICIO,dos);
					
					// String
				
						writeString(this.COD_SUBCATEGORIA_SERVICIO,dos);
					
					// String
				
						writeString(this.SUBCATEGORIA_SERVICIO,dos);
					
					// String
				
						writeString(this.ORDEN_LECTURA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD_LECTURA,dos);
					
					// String
				
						writeString(this.RUTA_LECTURA,dos);
					
					// String
				
						writeString(this.CONSECUTIVO_RUTA_LECTURA,dos);
					
					// String
				
						writeString(this.INSTALACION,dos);
					
					// String
				
						writeString(this.ID_DIRECCION,dos);
					
					// String
				
						writeString(this.ID_ZONA_OPERATIVA,dos);
					
					// String
				
						writeString(this.ZONA_OPERATIVA,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.UNIDAD_OPERATIVA,dos);
					
					// String
				
						writeString(this.IDENTIFICACION,dos);
					
					// String
				
						writeString(this.CONSUMO_LEIDO,dos);
					
					// String
				
						writeString(this.CONSUMO_PROMEDIO,dos);
					
					// String
				
						writeString(this.CONSUMO_CORREGIDO,dos);
					
					// String
				
						writeString(this.CONSUMO_FACTURADO,dos);
					
					// String
				
						writeString(this.FRECUENCIA_LECT,dos);
					
					// String
				
						writeString(this.COORDENADA_X,dos);
					
					// String
				
						writeString(this.COORDENADA_Y,dos);
					
					// String
				
						writeString(this.urbano_rural,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID_LECTURA="+ID_LECTURA);
		sb.append(",CONSECUTIVO_REPORTE="+CONSECUTIVO_REPORTE);
		sb.append(",PERIODO_CONSUMO="+PERIODO_CONSUMO);
		sb.append(",PERIODO_FACTURACION="+PERIODO_FACTURACION);
		sb.append(",ANO_FACTURACION="+ANO_FACTURACION);
		sb.append(",MES_FACTURACION="+MES_FACTURACION);
		sb.append(",CONSECUTIVO_LECTURA="+CONSECUTIVO_LECTURA);
		sb.append(",LECTURA_ANTERIOR="+LECTURA_ANTERIOR);
		sb.append(",LECTURA_TOMADA="+LECTURA_TOMADA);
		sb.append(",LECTURA_ORIGINAL="+LECTURA_ORIGINAL);
		sb.append(",FECHA_LECTURA_ANTERIOR="+FECHA_LECTURA_ANTERIOR);
		sb.append(",FECHA_LECTURA_ACTUAL="+FECHA_LECTURA_ACTUAL);
		sb.append(",CODIGO_CAUSANL_OBS="+CODIGO_CAUSANL_OBS);
		sb.append(",CAUSANL_OBS="+CAUSANL_OBS);
		sb.append(",CODIGO_OBS_ADIC="+CODIGO_OBS_ADIC);
		sb.append(",OBS_ADIC="+OBS_ADIC);
		sb.append(",OBSERV_ALFANUM="+OBSERV_ALFANUM);
		sb.append(",ADVERTENCIA_LECT="+ADVERTENCIA_LECT);
		sb.append(",COD_TIPO_CONSUMO="+COD_TIPO_CONSUMO);
		sb.append(",TIPO_CONSUMO="+TIPO_CONSUMO);
		sb.append(",COD_CICLO="+COD_CICLO);
		sb.append(",COD_CATEGORIA_SERVICIO="+COD_CATEGORIA_SERVICIO);
		sb.append(",CATEGORIA_SERVICIO="+CATEGORIA_SERVICIO);
		sb.append(",COD_SUBCATEGORIA_SERVICIO="+COD_SUBCATEGORIA_SERVICIO);
		sb.append(",SUBCATEGORIA_SERVICIO="+SUBCATEGORIA_SERVICIO);
		sb.append(",ORDEN_LECTURA="+ORDEN_LECTURA);
		sb.append(",ACTIVIDAD_LECTURA="+ACTIVIDAD_LECTURA);
		sb.append(",RUTA_LECTURA="+RUTA_LECTURA);
		sb.append(",CONSECUTIVO_RUTA_LECTURA="+CONSECUTIVO_RUTA_LECTURA);
		sb.append(",INSTALACION="+INSTALACION);
		sb.append(",ID_DIRECCION="+ID_DIRECCION);
		sb.append(",ID_ZONA_OPERATIVA="+ID_ZONA_OPERATIVA);
		sb.append(",ZONA_OPERATIVA="+ZONA_OPERATIVA);
		sb.append(",MUNICIPIO="+MUNICIPIO);
		sb.append(",UNIDAD_OPERATIVA="+UNIDAD_OPERATIVA);
		sb.append(",IDENTIFICACION="+IDENTIFICACION);
		sb.append(",CONSUMO_LEIDO="+CONSUMO_LEIDO);
		sb.append(",CONSUMO_PROMEDIO="+CONSUMO_PROMEDIO);
		sb.append(",CONSUMO_CORREGIDO="+CONSUMO_CORREGIDO);
		sb.append(",CONSUMO_FACTURADO="+CONSUMO_FACTURADO);
		sb.append(",FRECUENCIA_LECT="+FRECUENCIA_LECT);
		sb.append(",COORDENADA_X="+COORDENADA_X);
		sb.append(",COORDENADA_Y="+COORDENADA_Y);
		sb.append(",urbano_rural="+urbano_rural);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(secuencia_actaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID_LECTURA, other.ID_LECTURA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_exportar_lectura_oriente = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente = new byte[0];

	
			    public String ID_LECTURA;

				public String getID_LECTURA () {
					return this.ID_LECTURA;
				}
				
			    public String CONSECUTIVO_REPORTE;

				public String getCONSECUTIVO_REPORTE () {
					return this.CONSECUTIVO_REPORTE;
				}
				
			    public String PERIODO_CONSUMO;

				public String getPERIODO_CONSUMO () {
					return this.PERIODO_CONSUMO;
				}
				
			    public String PERIODO_FACTURACION;

				public String getPERIODO_FACTURACION () {
					return this.PERIODO_FACTURACION;
				}
				
			    public String ANO_FACTURACION;

				public String getANO_FACTURACION () {
					return this.ANO_FACTURACION;
				}
				
			    public String MES_FACTURACION;

				public String getMES_FACTURACION () {
					return this.MES_FACTURACION;
				}
				
			    public String CONSECUTIVO_LECTURA;

				public String getCONSECUTIVO_LECTURA () {
					return this.CONSECUTIVO_LECTURA;
				}
				
			    public String LECTURA_ANTERIOR;

				public String getLECTURA_ANTERIOR () {
					return this.LECTURA_ANTERIOR;
				}
				
			    public String LECTURA_TOMADA;

				public String getLECTURA_TOMADA () {
					return this.LECTURA_TOMADA;
				}
				
			    public String LECTURA_ORIGINAL;

				public String getLECTURA_ORIGINAL () {
					return this.LECTURA_ORIGINAL;
				}
				
			    public String FECHA_LECTURA_ANTERIOR;

				public String getFECHA_LECTURA_ANTERIOR () {
					return this.FECHA_LECTURA_ANTERIOR;
				}
				
			    public String FECHA_LECTURA_ACTUAL;

				public String getFECHA_LECTURA_ACTUAL () {
					return this.FECHA_LECTURA_ACTUAL;
				}
				
			    public String CODIGO_CAUSANL_OBS;

				public String getCODIGO_CAUSANL_OBS () {
					return this.CODIGO_CAUSANL_OBS;
				}
				
			    public String CAUSANL_OBS;

				public String getCAUSANL_OBS () {
					return this.CAUSANL_OBS;
				}
				
			    public String CODIGO_OBS_ADIC;

				public String getCODIGO_OBS_ADIC () {
					return this.CODIGO_OBS_ADIC;
				}
				
			    public String OBS_ADIC;

				public String getOBS_ADIC () {
					return this.OBS_ADIC;
				}
				
			    public String OBSERV_ALFANUM;

				public String getOBSERV_ALFANUM () {
					return this.OBSERV_ALFANUM;
				}
				
			    public String ADVERTENCIA_LECT;

				public String getADVERTENCIA_LECT () {
					return this.ADVERTENCIA_LECT;
				}
				
			    public String COD_TIPO_CONSUMO;

				public String getCOD_TIPO_CONSUMO () {
					return this.COD_TIPO_CONSUMO;
				}
				
			    public String TIPO_CONSUMO;

				public String getTIPO_CONSUMO () {
					return this.TIPO_CONSUMO;
				}
				
			    public String COD_CICLO;

				public String getCOD_CICLO () {
					return this.COD_CICLO;
				}
				
			    public String COD_CATEGORIA_SERVICIO;

				public String getCOD_CATEGORIA_SERVICIO () {
					return this.COD_CATEGORIA_SERVICIO;
				}
				
			    public String CATEGORIA_SERVICIO;

				public String getCATEGORIA_SERVICIO () {
					return this.CATEGORIA_SERVICIO;
				}
				
			    public String COD_SUBCATEGORIA_SERVICIO;

				public String getCOD_SUBCATEGORIA_SERVICIO () {
					return this.COD_SUBCATEGORIA_SERVICIO;
				}
				
			    public String SUBCATEGORIA_SERVICIO;

				public String getSUBCATEGORIA_SERVICIO () {
					return this.SUBCATEGORIA_SERVICIO;
				}
				
			    public String ORDEN_LECTURA;

				public String getORDEN_LECTURA () {
					return this.ORDEN_LECTURA;
				}
				
			    public String ACTIVIDAD_LECTURA;

				public String getACTIVIDAD_LECTURA () {
					return this.ACTIVIDAD_LECTURA;
				}
				
			    public String RUTA_LECTURA;

				public String getRUTA_LECTURA () {
					return this.RUTA_LECTURA;
				}
				
			    public String CONSECUTIVO_RUTA_LECTURA;

				public String getCONSECUTIVO_RUTA_LECTURA () {
					return this.CONSECUTIVO_RUTA_LECTURA;
				}
				
			    public String INSTALACION;

				public String getINSTALACION () {
					return this.INSTALACION;
				}
				
			    public String ID_DIRECCION;

				public String getID_DIRECCION () {
					return this.ID_DIRECCION;
				}
				
			    public String ID_ZONA_OPERATIVA;

				public String getID_ZONA_OPERATIVA () {
					return this.ID_ZONA_OPERATIVA;
				}
				
			    public String ZONA_OPERATIVA;

				public String getZONA_OPERATIVA () {
					return this.ZONA_OPERATIVA;
				}
				
			    public String MUNICIPIO;

				public String getMUNICIPIO () {
					return this.MUNICIPIO;
				}
				
			    public String UNIDAD_OPERATIVA;

				public String getUNIDAD_OPERATIVA () {
					return this.UNIDAD_OPERATIVA;
				}
				
			    public String IDENTIFICACION;

				public String getIDENTIFICACION () {
					return this.IDENTIFICACION;
				}
				
			    public String CONSUMO_LEIDO;

				public String getCONSUMO_LEIDO () {
					return this.CONSUMO_LEIDO;
				}
				
			    public String CONSUMO_PROMEDIO;

				public String getCONSUMO_PROMEDIO () {
					return this.CONSUMO_PROMEDIO;
				}
				
			    public String CONSUMO_CORREGIDO;

				public String getCONSUMO_CORREGIDO () {
					return this.CONSUMO_CORREGIDO;
				}
				
			    public String CONSUMO_FACTURADO;

				public String getCONSUMO_FACTURADO () {
					return this.CONSUMO_FACTURADO;
				}
				
			    public String FRECUENCIA_LECT;

				public String getFRECUENCIA_LECT () {
					return this.FRECUENCIA_LECT;
				}
				
			    public String COORDENADA_X;

				public String getCOORDENADA_X () {
					return this.COORDENADA_X;
				}
				
			    public String COORDENADA_Y;

				public String getCOORDENADA_Y () {
					return this.COORDENADA_Y;
				}
				
			    public String urbano_rural;

				public String getUrbano_rural () {
					return this.urbano_rural;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente.length == 0) {
   					commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_exportar_lectura_oriente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_exportar_lectura_oriente) {

        	try {

        		int length = 0;
		
					this.ID_LECTURA = readString(dis);
					
					this.CONSECUTIVO_REPORTE = readString(dis);
					
					this.PERIODO_CONSUMO = readString(dis);
					
					this.PERIODO_FACTURACION = readString(dis);
					
					this.ANO_FACTURACION = readString(dis);
					
					this.MES_FACTURACION = readString(dis);
					
					this.CONSECUTIVO_LECTURA = readString(dis);
					
					this.LECTURA_ANTERIOR = readString(dis);
					
					this.LECTURA_TOMADA = readString(dis);
					
					this.LECTURA_ORIGINAL = readString(dis);
					
					this.FECHA_LECTURA_ANTERIOR = readString(dis);
					
					this.FECHA_LECTURA_ACTUAL = readString(dis);
					
					this.CODIGO_CAUSANL_OBS = readString(dis);
					
					this.CAUSANL_OBS = readString(dis);
					
					this.CODIGO_OBS_ADIC = readString(dis);
					
					this.OBS_ADIC = readString(dis);
					
					this.OBSERV_ALFANUM = readString(dis);
					
					this.ADVERTENCIA_LECT = readString(dis);
					
					this.COD_TIPO_CONSUMO = readString(dis);
					
					this.TIPO_CONSUMO = readString(dis);
					
					this.COD_CICLO = readString(dis);
					
					this.COD_CATEGORIA_SERVICIO = readString(dis);
					
					this.CATEGORIA_SERVICIO = readString(dis);
					
					this.COD_SUBCATEGORIA_SERVICIO = readString(dis);
					
					this.SUBCATEGORIA_SERVICIO = readString(dis);
					
					this.ORDEN_LECTURA = readString(dis);
					
					this.ACTIVIDAD_LECTURA = readString(dis);
					
					this.RUTA_LECTURA = readString(dis);
					
					this.CONSECUTIVO_RUTA_LECTURA = readString(dis);
					
					this.INSTALACION = readString(dis);
					
					this.ID_DIRECCION = readString(dis);
					
					this.ID_ZONA_OPERATIVA = readString(dis);
					
					this.ZONA_OPERATIVA = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.UNIDAD_OPERATIVA = readString(dis);
					
					this.IDENTIFICACION = readString(dis);
					
					this.CONSUMO_LEIDO = readString(dis);
					
					this.CONSUMO_PROMEDIO = readString(dis);
					
					this.CONSUMO_CORREGIDO = readString(dis);
					
					this.CONSUMO_FACTURADO = readString(dis);
					
					this.FRECUENCIA_LECT = readString(dis);
					
					this.COORDENADA_X = readString(dis);
					
					this.COORDENADA_Y = readString(dis);
					
					this.urbano_rural = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID_LECTURA,dos);
					
					// String
				
						writeString(this.CONSECUTIVO_REPORTE,dos);
					
					// String
				
						writeString(this.PERIODO_CONSUMO,dos);
					
					// String
				
						writeString(this.PERIODO_FACTURACION,dos);
					
					// String
				
						writeString(this.ANO_FACTURACION,dos);
					
					// String
				
						writeString(this.MES_FACTURACION,dos);
					
					// String
				
						writeString(this.CONSECUTIVO_LECTURA,dos);
					
					// String
				
						writeString(this.LECTURA_ANTERIOR,dos);
					
					// String
				
						writeString(this.LECTURA_TOMADA,dos);
					
					// String
				
						writeString(this.LECTURA_ORIGINAL,dos);
					
					// String
				
						writeString(this.FECHA_LECTURA_ANTERIOR,dos);
					
					// String
				
						writeString(this.FECHA_LECTURA_ACTUAL,dos);
					
					// String
				
						writeString(this.CODIGO_CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CAUSANL_OBS,dos);
					
					// String
				
						writeString(this.CODIGO_OBS_ADIC,dos);
					
					// String
				
						writeString(this.OBS_ADIC,dos);
					
					// String
				
						writeString(this.OBSERV_ALFANUM,dos);
					
					// String
				
						writeString(this.ADVERTENCIA_LECT,dos);
					
					// String
				
						writeString(this.COD_TIPO_CONSUMO,dos);
					
					// String
				
						writeString(this.TIPO_CONSUMO,dos);
					
					// String
				
						writeString(this.COD_CICLO,dos);
					
					// String
				
						writeString(this.COD_CATEGORIA_SERVICIO,dos);
					
					// String
				
						writeString(this.CATEGORIA_SERVICIO,dos);
					
					// String
				
						writeString(this.COD_SUBCATEGORIA_SERVICIO,dos);
					
					// String
				
						writeString(this.SUBCATEGORIA_SERVICIO,dos);
					
					// String
				
						writeString(this.ORDEN_LECTURA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD_LECTURA,dos);
					
					// String
				
						writeString(this.RUTA_LECTURA,dos);
					
					// String
				
						writeString(this.CONSECUTIVO_RUTA_LECTURA,dos);
					
					// String
				
						writeString(this.INSTALACION,dos);
					
					// String
				
						writeString(this.ID_DIRECCION,dos);
					
					// String
				
						writeString(this.ID_ZONA_OPERATIVA,dos);
					
					// String
				
						writeString(this.ZONA_OPERATIVA,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.UNIDAD_OPERATIVA,dos);
					
					// String
				
						writeString(this.IDENTIFICACION,dos);
					
					// String
				
						writeString(this.CONSUMO_LEIDO,dos);
					
					// String
				
						writeString(this.CONSUMO_PROMEDIO,dos);
					
					// String
				
						writeString(this.CONSUMO_CORREGIDO,dos);
					
					// String
				
						writeString(this.CONSUMO_FACTURADO,dos);
					
					// String
				
						writeString(this.FRECUENCIA_LECT,dos);
					
					// String
				
						writeString(this.COORDENADA_X,dos);
					
					// String
				
						writeString(this.COORDENADA_Y,dos);
					
					// String
				
						writeString(this.urbano_rural,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID_LECTURA="+ID_LECTURA);
		sb.append(",CONSECUTIVO_REPORTE="+CONSECUTIVO_REPORTE);
		sb.append(",PERIODO_CONSUMO="+PERIODO_CONSUMO);
		sb.append(",PERIODO_FACTURACION="+PERIODO_FACTURACION);
		sb.append(",ANO_FACTURACION="+ANO_FACTURACION);
		sb.append(",MES_FACTURACION="+MES_FACTURACION);
		sb.append(",CONSECUTIVO_LECTURA="+CONSECUTIVO_LECTURA);
		sb.append(",LECTURA_ANTERIOR="+LECTURA_ANTERIOR);
		sb.append(",LECTURA_TOMADA="+LECTURA_TOMADA);
		sb.append(",LECTURA_ORIGINAL="+LECTURA_ORIGINAL);
		sb.append(",FECHA_LECTURA_ANTERIOR="+FECHA_LECTURA_ANTERIOR);
		sb.append(",FECHA_LECTURA_ACTUAL="+FECHA_LECTURA_ACTUAL);
		sb.append(",CODIGO_CAUSANL_OBS="+CODIGO_CAUSANL_OBS);
		sb.append(",CAUSANL_OBS="+CAUSANL_OBS);
		sb.append(",CODIGO_OBS_ADIC="+CODIGO_OBS_ADIC);
		sb.append(",OBS_ADIC="+OBS_ADIC);
		sb.append(",OBSERV_ALFANUM="+OBSERV_ALFANUM);
		sb.append(",ADVERTENCIA_LECT="+ADVERTENCIA_LECT);
		sb.append(",COD_TIPO_CONSUMO="+COD_TIPO_CONSUMO);
		sb.append(",TIPO_CONSUMO="+TIPO_CONSUMO);
		sb.append(",COD_CICLO="+COD_CICLO);
		sb.append(",COD_CATEGORIA_SERVICIO="+COD_CATEGORIA_SERVICIO);
		sb.append(",CATEGORIA_SERVICIO="+CATEGORIA_SERVICIO);
		sb.append(",COD_SUBCATEGORIA_SERVICIO="+COD_SUBCATEGORIA_SERVICIO);
		sb.append(",SUBCATEGORIA_SERVICIO="+SUBCATEGORIA_SERVICIO);
		sb.append(",ORDEN_LECTURA="+ORDEN_LECTURA);
		sb.append(",ACTIVIDAD_LECTURA="+ACTIVIDAD_LECTURA);
		sb.append(",RUTA_LECTURA="+RUTA_LECTURA);
		sb.append(",CONSECUTIVO_RUTA_LECTURA="+CONSECUTIVO_RUTA_LECTURA);
		sb.append(",INSTALACION="+INSTALACION);
		sb.append(",ID_DIRECCION="+ID_DIRECCION);
		sb.append(",ID_ZONA_OPERATIVA="+ID_ZONA_OPERATIVA);
		sb.append(",ZONA_OPERATIVA="+ZONA_OPERATIVA);
		sb.append(",MUNICIPIO="+MUNICIPIO);
		sb.append(",UNIDAD_OPERATIVA="+UNIDAD_OPERATIVA);
		sb.append(",IDENTIFICACION="+IDENTIFICACION);
		sb.append(",CONSUMO_LEIDO="+CONSUMO_LEIDO);
		sb.append(",CONSUMO_PROMEDIO="+CONSUMO_PROMEDIO);
		sb.append(",CONSUMO_CORREGIDO="+CONSUMO_CORREGIDO);
		sb.append(",CONSUMO_FACTURADO="+CONSUMO_FACTURADO);
		sb.append(",FRECUENCIA_LECT="+FRECUENCIA_LECT);
		sb.append(",COORDENADA_X="+COORDENADA_X);
		sb.append(",COORDENADA_Y="+COORDENADA_Y);
		sb.append(",urbano_rural="+urbano_rural);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
secuencia_actaStruct secuencia_acta = new secuencia_actaStruct();





	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"secuencia_acta");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1="C:/Users/Administrador/OneDrive - ingeomega.com/03_Procesos Informáticos/11 Reportes Maxivos/01 Reporte Secuencias Lecturas Oriente/Secuencias De Lectura Oriente.xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("Secuencias De Lectura Oriente");
		xlsxTool_tFileOutputExcel_1.setAppend(false,false);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("ARIAL");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ID_LECTURA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CONSECUTIVO_REPORTE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PERIODO_CONSUMO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PERIODO_FACTURACION");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ANO_FACTURACION");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("MES_FACTURACION");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CONSECUTIVO_LECTURA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("LECTURA_ANTERIOR");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("LECTURA_TOMADA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("LECTURA_ORIGINAL");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FECHA_LECTURA_ANTERIOR");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FECHA_LECTURA_ACTUAL");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CODIGO_CAUSANL_OBS");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CAUSANL_OBS");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CODIGO_OBS_ADIC");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("OBS_ADIC");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("OBSERV_ALFANUM");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ADVERTENCIA_LECT");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COD_TIPO_CONSUMO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("TIPO_CONSUMO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COD_CICLO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COD_CATEGORIA_SERVICIO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CATEGORIA_SERVICIO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COD_SUBCATEGORIA_SERVICIO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SUBCATEGORIA_SERVICIO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ORDEN_LECTURA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ACTIVIDAD_LECTURA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("RUTA_LECTURA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CONSECUTIVO_RUTA_LECTURA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("INSTALACION");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ID_DIRECCION");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ID_ZONA_OPERATIVA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ZONA_OPERATIVA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("MUNICIPIO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UNIDAD_OPERATIVA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("IDENTIFICACION");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CONSUMO_LEIDO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CONSUMO_PROMEDIO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CONSUMO_CORREGIDO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CONSUMO_FACTURADO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FRECUENCIA_LECT");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COORDENADA_X");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COORDENADA_Y");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("urbano_rural");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
secuencia_actaStruct secuencia_acta_tmp = new secuencia_actaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.mariadb.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "lectura";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:sDLuE3CjkrLft+KJRTJSE2INJfjqIno3RzYK75W63lev9QkfbLrQPrI=");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:mariadb://" + "172.17.17.240" + ":" + "3306" + "/" + "ingeomega" + "?" + "noDatetimeStringSync=true";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\nSELECT \nDISTINCT(CONCAT(ORDEN_LECTURA,COD_TIPO_CONSUMO)) as ID_LECTURA ,\n CONSECUTIVO_REPORTE  \n, PERIODO_CONSUMO"
+"\n, PERIODO_FACTURACION \n, ANO_FACTURACION\n, MES_FACTURACION \n, CONSECUTIVO_LECTURA \n, LECTURA_ANTERIOR\n, LECTURA_TO"
+"MADA\n, LECTURA_ORIGINAL \n, FECHA_LECTURA_ANTERIOR \n, FECHA_LECTURA_ACTUAL \n, CODIGO_CAUSANL_OBS\n, CAUSANL_OBS\n, CO"
+"DIGO_OBS_ADIC\n, OBS_ADIC\n, OBSERV_ALFANUM\n, ADVERTENCIA_LECT\n, COD_TIPO_CONSUMO\n, TIPO_CONSUMO\n, COD_CICLO\n, COD_"
+"CATEGORIA_SERVICIO\n, CATEGORIA_SERVICIO\n, COD_SUBCATEGORIA_SERVICIO\n, SUBCATEGORIA_SERVICIO\n, ORDEN_LECTURA\n, ACTIV"
+"IDAD_LECTURA\n, RUTA_LECTURA\n, CONSECUTIVO_RUTA_LECTURA\n,  CONCAT('_',NRO_INSTALACION) AS INSTALACION\n, ID_DIRECCION"
+"\n, ID_ZONA_OPERATIVA\n, ZONA_OPERATIVA\n, MUNICIPIO\n, UNIDAD_OPERATIVA\n, IDENTIFICACION\n, CONSUMO_LEIDO\n, CONSUMO_PR"
+"OMEDIO\n, CONSUMO_CORREGIDO\n, CONSUMO_FACTURADO\n, FRECUENCIA_LECT\n,COORDENADA_X\n,COORDENADA_Y\n,(Case when substr(NR"
+"O_INSTALACION,1,1) = 1 then\nCase when substr(NRO_INSTALACION,7,1) = 1 then\n'U'\nelse\n(CASE WHEN ID_ZONA_OPERATIVA = 8"
+" THEN 'U'  Else 'R'  End)\nend\nelse\n'U'\nend) as urbano_rural\nFROM  secuencias_lectura\nWHERE\n (substr(FECHA_LECTURA"
+"_ACTUAL,(INSTR(FECHA_LECTURA_ACTUAL,'-')+1),2)) = (select COD_MES from consulta_fecha_lectura_oriente)\nAND `ID_ZONA_OPE"
+"RATIVA` IN (21)\nAND CODIGO_CAUSANL_OBS <> 100\nAND cod_tipo_consumo in(1,3,7,9)\nAND FECHA_LECTURA_ACTUAL LIKE '%2022%'"
+"\n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.ID_LECTURA = null;
							} else {
	                         		
        	row1.ID_LECTURA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.CONSECUTIVO_REPORTE = null;
							} else {
	                         		
        	row1.CONSECUTIVO_REPORTE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.PERIODO_CONSUMO = null;
							} else {
	                         		
        	row1.PERIODO_CONSUMO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.PERIODO_FACTURACION = null;
							} else {
	                         		
        	row1.PERIODO_FACTURACION = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.ANO_FACTURACION = null;
							} else {
	                         		
        	row1.ANO_FACTURACION = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.MES_FACTURACION = null;
							} else {
	                         		
        	row1.MES_FACTURACION = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.CONSECUTIVO_LECTURA = null;
							} else {
	                         		
        	row1.CONSECUTIVO_LECTURA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.LECTURA_ANTERIOR = null;
							} else {
	                         		
        	row1.LECTURA_ANTERIOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.LECTURA_TOMADA = null;
							} else {
	                         		
        	row1.LECTURA_TOMADA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.LECTURA_ORIGINAL = null;
							} else {
	                         		
        	row1.LECTURA_ORIGINAL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.FECHA_LECTURA_ANTERIOR = null;
							} else {
	                         		
        	row1.FECHA_LECTURA_ANTERIOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.FECHA_LECTURA_ACTUAL = null;
							} else {
	                         		
        	row1.FECHA_LECTURA_ACTUAL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.CODIGO_CAUSANL_OBS = null;
							} else {
	                         		
        	row1.CODIGO_CAUSANL_OBS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.CAUSANL_OBS = null;
							} else {
	                         		
        	row1.CAUSANL_OBS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.CODIGO_OBS_ADIC = null;
							} else {
	                         		
        	row1.CODIGO_OBS_ADIC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.OBS_ADIC = null;
							} else {
	                         		
        	row1.OBS_ADIC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.OBSERV_ALFANUM = null;
							} else {
	                         		
        	row1.OBSERV_ALFANUM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.ADVERTENCIA_LECT = null;
							} else {
	                         		
        	row1.ADVERTENCIA_LECT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.COD_TIPO_CONSUMO = null;
							} else {
	                         		
        	row1.COD_TIPO_CONSUMO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.TIPO_CONSUMO = null;
							} else {
	                         		
        	row1.TIPO_CONSUMO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.COD_CICLO = null;
							} else {
	                         		
        	row1.COD_CICLO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.COD_CATEGORIA_SERVICIO = null;
							} else {
	                         		
        	row1.COD_CATEGORIA_SERVICIO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.CATEGORIA_SERVICIO = null;
							} else {
	                         		
        	row1.CATEGORIA_SERVICIO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.COD_SUBCATEGORIA_SERVICIO = null;
							} else {
	                         		
        	row1.COD_SUBCATEGORIA_SERVICIO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.SUBCATEGORIA_SERVICIO = null;
							} else {
	                         		
        	row1.SUBCATEGORIA_SERVICIO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.ORDEN_LECTURA = null;
							} else {
	                         		
        	row1.ORDEN_LECTURA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.ACTIVIDAD_LECTURA = null;
							} else {
	                         		
        	row1.ACTIVIDAD_LECTURA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.RUTA_LECTURA = null;
							} else {
	                         		
        	row1.RUTA_LECTURA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.CONSECUTIVO_RUTA_LECTURA = null;
							} else {
	                         		
        	row1.CONSECUTIVO_RUTA_LECTURA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.INSTALACION = null;
							} else {
	                         		
        	row1.INSTALACION = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.ID_DIRECCION = null;
							} else {
	                         		
        	row1.ID_DIRECCION = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.ID_ZONA_OPERATIVA = null;
							} else {
	                         		
        	row1.ID_ZONA_OPERATIVA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.ZONA_OPERATIVA = null;
							} else {
	                         		
        	row1.ZONA_OPERATIVA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.MUNICIPIO = null;
							} else {
	                         		
        	row1.MUNICIPIO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.UNIDAD_OPERATIVA = null;
							} else {
	                         		
        	row1.UNIDAD_OPERATIVA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.IDENTIFICACION = null;
							} else {
	                         		
        	row1.IDENTIFICACION = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.CONSUMO_LEIDO = null;
							} else {
	                         		
        	row1.CONSUMO_LEIDO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.CONSUMO_PROMEDIO = null;
							} else {
	                         		
        	row1.CONSUMO_PROMEDIO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.CONSUMO_CORREGIDO = null;
							} else {
	                         		
        	row1.CONSUMO_CORREGIDO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 39, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.CONSUMO_FACTURADO = null;
							} else {
	                         		
        	row1.CONSUMO_FACTURADO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.FRECUENCIA_LECT = null;
							} else {
	                         		
        	row1.FRECUENCIA_LECT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.COORDENADA_X = null;
							} else {
	                         		
        	row1.COORDENADA_X = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.COORDENADA_Y = null;
							} else {
	                         		
        	row1.COORDENADA_Y = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.urbano_rural = null;
							} else {
	                         		
        	row1.urbano_rural = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

secuencia_acta = null;


// # Output table : 'secuencia_acta'
secuencia_acta_tmp.ID_LECTURA = row1.ID_LECTURA;
secuencia_acta_tmp.CONSECUTIVO_REPORTE = row1.CONSECUTIVO_REPORTE;
secuencia_acta_tmp.PERIODO_CONSUMO = row1.PERIODO_CONSUMO;
secuencia_acta_tmp.PERIODO_FACTURACION = row1.PERIODO_FACTURACION;
secuencia_acta_tmp.ANO_FACTURACION = row1.ANO_FACTURACION;
secuencia_acta_tmp.MES_FACTURACION = row1.MES_FACTURACION;
secuencia_acta_tmp.CONSECUTIVO_LECTURA = row1.CONSECUTIVO_LECTURA;
secuencia_acta_tmp.LECTURA_ANTERIOR = row1.LECTURA_ANTERIOR;
secuencia_acta_tmp.LECTURA_TOMADA = row1.LECTURA_TOMADA;
secuencia_acta_tmp.LECTURA_ORIGINAL = row1.LECTURA_ORIGINAL;
secuencia_acta_tmp.FECHA_LECTURA_ANTERIOR = row1.FECHA_LECTURA_ANTERIOR;
secuencia_acta_tmp.FECHA_LECTURA_ACTUAL = row1.FECHA_LECTURA_ACTUAL;
secuencia_acta_tmp.CODIGO_CAUSANL_OBS = row1.CODIGO_CAUSANL_OBS;
secuencia_acta_tmp.CAUSANL_OBS = row1.CAUSANL_OBS;
secuencia_acta_tmp.CODIGO_OBS_ADIC = row1.CODIGO_OBS_ADIC;
secuencia_acta_tmp.OBS_ADIC = row1.OBS_ADIC;
secuencia_acta_tmp.OBSERV_ALFANUM = row1.OBSERV_ALFANUM;
secuencia_acta_tmp.ADVERTENCIA_LECT = row1.ADVERTENCIA_LECT;
secuencia_acta_tmp.COD_TIPO_CONSUMO = row1.COD_TIPO_CONSUMO;
secuencia_acta_tmp.TIPO_CONSUMO = row1.TIPO_CONSUMO;
secuencia_acta_tmp.COD_CICLO = row1.COD_CICLO;
secuencia_acta_tmp.COD_CATEGORIA_SERVICIO = row1.COD_CATEGORIA_SERVICIO;
secuencia_acta_tmp.CATEGORIA_SERVICIO = row1.CATEGORIA_SERVICIO;
secuencia_acta_tmp.COD_SUBCATEGORIA_SERVICIO = row1.COD_SUBCATEGORIA_SERVICIO;
secuencia_acta_tmp.SUBCATEGORIA_SERVICIO = row1.SUBCATEGORIA_SERVICIO;
secuencia_acta_tmp.ORDEN_LECTURA = row1.ORDEN_LECTURA;
secuencia_acta_tmp.ACTIVIDAD_LECTURA = row1.ACTIVIDAD_LECTURA;
secuencia_acta_tmp.RUTA_LECTURA = row1.RUTA_LECTURA;
secuencia_acta_tmp.CONSECUTIVO_RUTA_LECTURA = row1.CONSECUTIVO_RUTA_LECTURA;
secuencia_acta_tmp.INSTALACION = row1.INSTALACION;
secuencia_acta_tmp.ID_DIRECCION = row1.ID_DIRECCION;
secuencia_acta_tmp.ID_ZONA_OPERATIVA = row1.ID_ZONA_OPERATIVA;
secuencia_acta_tmp.ZONA_OPERATIVA = row1.ZONA_OPERATIVA;
secuencia_acta_tmp.MUNICIPIO = row1.MUNICIPIO;
secuencia_acta_tmp.UNIDAD_OPERATIVA = row1.UNIDAD_OPERATIVA;
secuencia_acta_tmp.IDENTIFICACION = row1.IDENTIFICACION;
secuencia_acta_tmp.CONSUMO_LEIDO = row1.CONSUMO_LEIDO;
secuencia_acta_tmp.CONSUMO_PROMEDIO = row1.CONSUMO_PROMEDIO;
secuencia_acta_tmp.CONSUMO_CORREGIDO = row1.CONSUMO_CORREGIDO;
secuencia_acta_tmp.CONSUMO_FACTURADO = row1.CONSUMO_FACTURADO;
secuencia_acta_tmp.FRECUENCIA_LECT = row1.FRECUENCIA_LECT;
secuencia_acta_tmp.COORDENADA_X = row1.COORDENADA_X;
secuencia_acta_tmp.COORDENADA_Y = row1.COORDENADA_Y;
secuencia_acta_tmp.urbano_rural = row1.urbano_rural;
secuencia_acta = secuencia_acta_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "secuencia_acta"
if(secuencia_acta != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"secuencia_acta");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(secuencia_acta.ID_LECTURA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ID_LECTURA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CONSECUTIVO_REPORTE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CONSECUTIVO_REPORTE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.PERIODO_CONSUMO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.PERIODO_CONSUMO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.PERIODO_FACTURACION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.PERIODO_FACTURACION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ANO_FACTURACION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ANO_FACTURACION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.MES_FACTURACION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.MES_FACTURACION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CONSECUTIVO_LECTURA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CONSECUTIVO_LECTURA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.LECTURA_ANTERIOR != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.LECTURA_ANTERIOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.LECTURA_TOMADA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.LECTURA_TOMADA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.LECTURA_ORIGINAL != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.LECTURA_ORIGINAL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.FECHA_LECTURA_ANTERIOR != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.FECHA_LECTURA_ANTERIOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.FECHA_LECTURA_ACTUAL != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.FECHA_LECTURA_ACTUAL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CODIGO_CAUSANL_OBS != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CODIGO_CAUSANL_OBS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CAUSANL_OBS != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CAUSANL_OBS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CODIGO_OBS_ADIC != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CODIGO_OBS_ADIC));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.OBS_ADIC != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.OBS_ADIC));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.OBSERV_ALFANUM != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.OBSERV_ALFANUM));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ADVERTENCIA_LECT != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ADVERTENCIA_LECT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.COD_TIPO_CONSUMO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.COD_TIPO_CONSUMO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.TIPO_CONSUMO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.TIPO_CONSUMO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.COD_CICLO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.COD_CICLO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.COD_CATEGORIA_SERVICIO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.COD_CATEGORIA_SERVICIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CATEGORIA_SERVICIO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CATEGORIA_SERVICIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.COD_SUBCATEGORIA_SERVICIO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.COD_SUBCATEGORIA_SERVICIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.SUBCATEGORIA_SERVICIO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.SUBCATEGORIA_SERVICIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ORDEN_LECTURA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ORDEN_LECTURA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ACTIVIDAD_LECTURA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ACTIVIDAD_LECTURA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.RUTA_LECTURA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.RUTA_LECTURA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CONSECUTIVO_RUTA_LECTURA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CONSECUTIVO_RUTA_LECTURA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.INSTALACION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.INSTALACION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ID_DIRECCION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ID_DIRECCION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ID_ZONA_OPERATIVA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ID_ZONA_OPERATIVA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.ZONA_OPERATIVA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.ZONA_OPERATIVA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.MUNICIPIO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.MUNICIPIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.UNIDAD_OPERATIVA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.UNIDAD_OPERATIVA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.IDENTIFICACION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.IDENTIFICACION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CONSUMO_LEIDO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CONSUMO_LEIDO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CONSUMO_PROMEDIO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CONSUMO_PROMEDIO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CONSUMO_CORREGIDO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CONSUMO_CORREGIDO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.CONSUMO_FACTURADO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.CONSUMO_FACTURADO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.FRECUENCIA_LECT != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.FRECUENCIA_LECT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.COORDENADA_X != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.COORDENADA_X));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.COORDENADA_Y != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.COORDENADA_Y));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(secuencia_acta.urbano_rural != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(secuencia_acta.urbano_rural));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "secuencia_acta"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"secuencia_acta");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final exportar_lectura_oriente exportar_lectura_orienteClass = new exportar_lectura_oriente();

        int exitCode = exportar_lectura_orienteClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = exportar_lectura_oriente.class.getClassLoader().getResourceAsStream("local_project/exportar_lectura_oriente_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = exportar_lectura_oriente.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : exportar_lectura_oriente");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     102255 characters generated by Talend Open Studio for Big Data 
 *     on the 23 de mayo de 2022 10:13:23 AM COT
 ************************************************************************************************/